// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: backEndService.proto
// Original file comments:
// Server here is the Edge Service
// Client is the Edge Server
//
#ifndef GRPC_backEndService_2eproto__INCLUDED
#define GRPC_backEndService_2eproto__INCLUDED

#include "backEndService.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace serviceProto {

class BackEndService final {
 public:
  static constexpr char const* service_full_name() {
    return "serviceProto.BackEndService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // getProvider is end point available on Back End Service
    // Edge server can request here to get N_p and cer-p from Back End Service
    virtual ::grpc::Status getProvider(::grpc::ClientContext* context, const ::serviceProto::ProviderRequest& request, ::serviceProto::ProviderReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::serviceProto::ProviderReply>> AsyncgetProvider(::grpc::ClientContext* context, const ::serviceProto::ProviderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::serviceProto::ProviderReply>>(AsyncgetProviderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::serviceProto::ProviderReply>> PrepareAsyncgetProvider(::grpc::ClientContext* context, const ::serviceProto::ProviderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::serviceProto::ProviderReply>>(PrepareAsyncgetProviderRaw(context, request, cq));
    }
    // Provider sends cert-p and requests access control
    virtual ::grpc::Status registerProvider(::grpc::ClientContext* context, const ::serviceProto::CertP& request, ::serviceProto::ProviderID* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::serviceProto::ProviderID>> AsyncregisterProvider(::grpc::ClientContext* context, const ::serviceProto::CertP& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::serviceProto::ProviderID>>(AsyncregisterProviderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::serviceProto::ProviderID>> PrepareAsyncregisterProvider(::grpc::ClientContext* context, const ::serviceProto::CertP& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::serviceProto::ProviderID>>(PrepareAsyncregisterProviderRaw(context, request, cq));
    }
    // Provider notifies Cloud that a new blacklisted token exists
    virtual ::grpc::Status registerBlackListedToken(::grpc::ClientContext* context, const ::serviceProto::UserToken& request, ::serviceProto::BlackListResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::serviceProto::BlackListResponse>> AsyncregisterBlackListedToken(::grpc::ClientContext* context, const ::serviceProto::UserToken& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::serviceProto::BlackListResponse>>(AsyncregisterBlackListedTokenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::serviceProto::BlackListResponse>> PrepareAsyncregisterBlackListedToken(::grpc::ClientContext* context, const ::serviceProto::UserToken& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::serviceProto::BlackListResponse>>(PrepareAsyncregisterBlackListedTokenRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // getProvider is end point available on Back End Service
      // Edge server can request here to get N_p and cer-p from Back End Service
      virtual void getProvider(::grpc::ClientContext* context, const ::serviceProto::ProviderRequest* request, ::serviceProto::ProviderReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getProvider(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::serviceProto::ProviderReply* response, std::function<void(::grpc::Status)>) = 0;
      // Provider sends cert-p and requests access control
      virtual void registerProvider(::grpc::ClientContext* context, const ::serviceProto::CertP* request, ::serviceProto::ProviderID* response, std::function<void(::grpc::Status)>) = 0;
      virtual void registerProvider(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::serviceProto::ProviderID* response, std::function<void(::grpc::Status)>) = 0;
      // Provider notifies Cloud that a new blacklisted token exists
      virtual void registerBlackListedToken(::grpc::ClientContext* context, const ::serviceProto::UserToken* request, ::serviceProto::BlackListResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void registerBlackListedToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::serviceProto::BlackListResponse* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::serviceProto::ProviderReply>* AsyncgetProviderRaw(::grpc::ClientContext* context, const ::serviceProto::ProviderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::serviceProto::ProviderReply>* PrepareAsyncgetProviderRaw(::grpc::ClientContext* context, const ::serviceProto::ProviderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::serviceProto::ProviderID>* AsyncregisterProviderRaw(::grpc::ClientContext* context, const ::serviceProto::CertP& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::serviceProto::ProviderID>* PrepareAsyncregisterProviderRaw(::grpc::ClientContext* context, const ::serviceProto::CertP& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::serviceProto::BlackListResponse>* AsyncregisterBlackListedTokenRaw(::grpc::ClientContext* context, const ::serviceProto::UserToken& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::serviceProto::BlackListResponse>* PrepareAsyncregisterBlackListedTokenRaw(::grpc::ClientContext* context, const ::serviceProto::UserToken& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status getProvider(::grpc::ClientContext* context, const ::serviceProto::ProviderRequest& request, ::serviceProto::ProviderReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::serviceProto::ProviderReply>> AsyncgetProvider(::grpc::ClientContext* context, const ::serviceProto::ProviderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::serviceProto::ProviderReply>>(AsyncgetProviderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::serviceProto::ProviderReply>> PrepareAsyncgetProvider(::grpc::ClientContext* context, const ::serviceProto::ProviderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::serviceProto::ProviderReply>>(PrepareAsyncgetProviderRaw(context, request, cq));
    }
    ::grpc::Status registerProvider(::grpc::ClientContext* context, const ::serviceProto::CertP& request, ::serviceProto::ProviderID* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::serviceProto::ProviderID>> AsyncregisterProvider(::grpc::ClientContext* context, const ::serviceProto::CertP& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::serviceProto::ProviderID>>(AsyncregisterProviderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::serviceProto::ProviderID>> PrepareAsyncregisterProvider(::grpc::ClientContext* context, const ::serviceProto::CertP& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::serviceProto::ProviderID>>(PrepareAsyncregisterProviderRaw(context, request, cq));
    }
    ::grpc::Status registerBlackListedToken(::grpc::ClientContext* context, const ::serviceProto::UserToken& request, ::serviceProto::BlackListResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::serviceProto::BlackListResponse>> AsyncregisterBlackListedToken(::grpc::ClientContext* context, const ::serviceProto::UserToken& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::serviceProto::BlackListResponse>>(AsyncregisterBlackListedTokenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::serviceProto::BlackListResponse>> PrepareAsyncregisterBlackListedToken(::grpc::ClientContext* context, const ::serviceProto::UserToken& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::serviceProto::BlackListResponse>>(PrepareAsyncregisterBlackListedTokenRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void getProvider(::grpc::ClientContext* context, const ::serviceProto::ProviderRequest* request, ::serviceProto::ProviderReply* response, std::function<void(::grpc::Status)>) override;
      void getProvider(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::serviceProto::ProviderReply* response, std::function<void(::grpc::Status)>) override;
      void registerProvider(::grpc::ClientContext* context, const ::serviceProto::CertP* request, ::serviceProto::ProviderID* response, std::function<void(::grpc::Status)>) override;
      void registerProvider(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::serviceProto::ProviderID* response, std::function<void(::grpc::Status)>) override;
      void registerBlackListedToken(::grpc::ClientContext* context, const ::serviceProto::UserToken* request, ::serviceProto::BlackListResponse* response, std::function<void(::grpc::Status)>) override;
      void registerBlackListedToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::serviceProto::BlackListResponse* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::serviceProto::ProviderReply>* AsyncgetProviderRaw(::grpc::ClientContext* context, const ::serviceProto::ProviderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::serviceProto::ProviderReply>* PrepareAsyncgetProviderRaw(::grpc::ClientContext* context, const ::serviceProto::ProviderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::serviceProto::ProviderID>* AsyncregisterProviderRaw(::grpc::ClientContext* context, const ::serviceProto::CertP& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::serviceProto::ProviderID>* PrepareAsyncregisterProviderRaw(::grpc::ClientContext* context, const ::serviceProto::CertP& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::serviceProto::BlackListResponse>* AsyncregisterBlackListedTokenRaw(::grpc::ClientContext* context, const ::serviceProto::UserToken& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::serviceProto::BlackListResponse>* PrepareAsyncregisterBlackListedTokenRaw(::grpc::ClientContext* context, const ::serviceProto::UserToken& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_getProvider_;
    const ::grpc::internal::RpcMethod rpcmethod_registerProvider_;
    const ::grpc::internal::RpcMethod rpcmethod_registerBlackListedToken_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // getProvider is end point available on Back End Service
    // Edge server can request here to get N_p and cer-p from Back End Service
    virtual ::grpc::Status getProvider(::grpc::ServerContext* context, const ::serviceProto::ProviderRequest* request, ::serviceProto::ProviderReply* response);
    // Provider sends cert-p and requests access control
    virtual ::grpc::Status registerProvider(::grpc::ServerContext* context, const ::serviceProto::CertP* request, ::serviceProto::ProviderID* response);
    // Provider notifies Cloud that a new blacklisted token exists
    virtual ::grpc::Status registerBlackListedToken(::grpc::ServerContext* context, const ::serviceProto::UserToken* request, ::serviceProto::BlackListResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_getProvider : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getProvider() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_getProvider() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getProvider(::grpc::ServerContext* context, const ::serviceProto::ProviderRequest* request, ::serviceProto::ProviderReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetProvider(::grpc::ServerContext* context, ::serviceProto::ProviderRequest* request, ::grpc::ServerAsyncResponseWriter< ::serviceProto::ProviderReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_registerProvider : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_registerProvider() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_registerProvider() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerProvider(::grpc::ServerContext* context, const ::serviceProto::CertP* request, ::serviceProto::ProviderID* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestregisterProvider(::grpc::ServerContext* context, ::serviceProto::CertP* request, ::grpc::ServerAsyncResponseWriter< ::serviceProto::ProviderID>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_registerBlackListedToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_registerBlackListedToken() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_registerBlackListedToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerBlackListedToken(::grpc::ServerContext* context, const ::serviceProto::UserToken* request, ::serviceProto::BlackListResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestregisterBlackListedToken(::grpc::ServerContext* context, ::serviceProto::UserToken* request, ::grpc::ServerAsyncResponseWriter< ::serviceProto::BlackListResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_getProvider<WithAsyncMethod_registerProvider<WithAsyncMethod_registerBlackListedToken<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getProvider : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_getProvider() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::serviceProto::ProviderRequest, ::serviceProto::ProviderReply>(
          [this](::grpc::ServerContext* context,
                 const ::serviceProto::ProviderRequest* request,
                 ::serviceProto::ProviderReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->getProvider(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_getProvider() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getProvider(::grpc::ServerContext* context, const ::serviceProto::ProviderRequest* request, ::serviceProto::ProviderReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getProvider(::grpc::ServerContext* context, const ::serviceProto::ProviderRequest* request, ::serviceProto::ProviderReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_registerProvider : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_registerProvider() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::serviceProto::CertP, ::serviceProto::ProviderID>(
          [this](::grpc::ServerContext* context,
                 const ::serviceProto::CertP* request,
                 ::serviceProto::ProviderID* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->registerProvider(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_registerProvider() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerProvider(::grpc::ServerContext* context, const ::serviceProto::CertP* request, ::serviceProto::ProviderID* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void registerProvider(::grpc::ServerContext* context, const ::serviceProto::CertP* request, ::serviceProto::ProviderID* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_registerBlackListedToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_registerBlackListedToken() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::serviceProto::UserToken, ::serviceProto::BlackListResponse>(
          [this](::grpc::ServerContext* context,
                 const ::serviceProto::UserToken* request,
                 ::serviceProto::BlackListResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->registerBlackListedToken(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_registerBlackListedToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerBlackListedToken(::grpc::ServerContext* context, const ::serviceProto::UserToken* request, ::serviceProto::BlackListResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void registerBlackListedToken(::grpc::ServerContext* context, const ::serviceProto::UserToken* request, ::serviceProto::BlackListResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_getProvider<ExperimentalWithCallbackMethod_registerProvider<ExperimentalWithCallbackMethod_registerBlackListedToken<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_getProvider : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getProvider() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_getProvider() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getProvider(::grpc::ServerContext* context, const ::serviceProto::ProviderRequest* request, ::serviceProto::ProviderReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_registerProvider : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_registerProvider() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_registerProvider() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerProvider(::grpc::ServerContext* context, const ::serviceProto::CertP* request, ::serviceProto::ProviderID* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_registerBlackListedToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_registerBlackListedToken() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_registerBlackListedToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerBlackListedToken(::grpc::ServerContext* context, const ::serviceProto::UserToken* request, ::serviceProto::BlackListResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_getProvider : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getProvider() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_getProvider() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getProvider(::grpc::ServerContext* context, const ::serviceProto::ProviderRequest* request, ::serviceProto::ProviderReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetProvider(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_registerProvider : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_registerProvider() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_registerProvider() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerProvider(::grpc::ServerContext* context, const ::serviceProto::CertP* request, ::serviceProto::ProviderID* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestregisterProvider(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_registerBlackListedToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_registerBlackListedToken() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_registerBlackListedToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerBlackListedToken(::grpc::ServerContext* context, const ::serviceProto::UserToken* request, ::serviceProto::BlackListResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestregisterBlackListedToken(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getProvider : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_getProvider() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->getProvider(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_getProvider() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getProvider(::grpc::ServerContext* context, const ::serviceProto::ProviderRequest* request, ::serviceProto::ProviderReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getProvider(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_registerProvider : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_registerProvider() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->registerProvider(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_registerProvider() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerProvider(::grpc::ServerContext* context, const ::serviceProto::CertP* request, ::serviceProto::ProviderID* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void registerProvider(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_registerBlackListedToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_registerBlackListedToken() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->registerBlackListedToken(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_registerBlackListedToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerBlackListedToken(::grpc::ServerContext* context, const ::serviceProto::UserToken* request, ::serviceProto::BlackListResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void registerBlackListedToken(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getProvider : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getProvider() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::serviceProto::ProviderRequest, ::serviceProto::ProviderReply>(std::bind(&WithStreamedUnaryMethod_getProvider<BaseClass>::StreamedgetProvider, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getProvider() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getProvider(::grpc::ServerContext* context, const ::serviceProto::ProviderRequest* request, ::serviceProto::ProviderReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetProvider(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::serviceProto::ProviderRequest,::serviceProto::ProviderReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_registerProvider : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_registerProvider() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::serviceProto::CertP, ::serviceProto::ProviderID>(std::bind(&WithStreamedUnaryMethod_registerProvider<BaseClass>::StreamedregisterProvider, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_registerProvider() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status registerProvider(::grpc::ServerContext* context, const ::serviceProto::CertP* request, ::serviceProto::ProviderID* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedregisterProvider(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::serviceProto::CertP,::serviceProto::ProviderID>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_registerBlackListedToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_registerBlackListedToken() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::serviceProto::UserToken, ::serviceProto::BlackListResponse>(std::bind(&WithStreamedUnaryMethod_registerBlackListedToken<BaseClass>::StreamedregisterBlackListedToken, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_registerBlackListedToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status registerBlackListedToken(::grpc::ServerContext* context, const ::serviceProto::UserToken* request, ::serviceProto::BlackListResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedregisterBlackListedToken(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::serviceProto::UserToken,::serviceProto::BlackListResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_getProvider<WithStreamedUnaryMethod_registerProvider<WithStreamedUnaryMethod_registerBlackListedToken<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_getProvider<WithStreamedUnaryMethod_registerProvider<WithStreamedUnaryMethod_registerBlackListedToken<Service > > > StreamedService;
};

}  // namespace serviceProto


#endif  // GRPC_backEndService_2eproto__INCLUDED
