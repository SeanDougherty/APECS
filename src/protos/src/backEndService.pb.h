// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: backEndService.proto

#ifndef PROTOBUF_INCLUDED_backEndService_2eproto
#define PROTOBUF_INCLUDED_backEndService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_backEndService_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_backEndService_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_backEndService_2eproto();
namespace serviceProto {
class BlackListResponse;
class BlackListResponseDefaultTypeInternal;
extern BlackListResponseDefaultTypeInternal _BlackListResponse_default_instance_;
class CertP;
class CertPDefaultTypeInternal;
extern CertPDefaultTypeInternal _CertP_default_instance_;
class ProviderID;
class ProviderIDDefaultTypeInternal;
extern ProviderIDDefaultTypeInternal _ProviderID_default_instance_;
class ProviderReply;
class ProviderReplyDefaultTypeInternal;
extern ProviderReplyDefaultTypeInternal _ProviderReply_default_instance_;
class ProviderRequest;
class ProviderRequestDefaultTypeInternal;
extern ProviderRequestDefaultTypeInternal _ProviderRequest_default_instance_;
class UserToken;
class UserTokenDefaultTypeInternal;
extern UserTokenDefaultTypeInternal _UserToken_default_instance_;
}  // namespace serviceProto
namespace google {
namespace protobuf {
template<> ::serviceProto::BlackListResponse* Arena::CreateMaybeMessage<::serviceProto::BlackListResponse>(Arena*);
template<> ::serviceProto::CertP* Arena::CreateMaybeMessage<::serviceProto::CertP>(Arena*);
template<> ::serviceProto::ProviderID* Arena::CreateMaybeMessage<::serviceProto::ProviderID>(Arena*);
template<> ::serviceProto::ProviderReply* Arena::CreateMaybeMessage<::serviceProto::ProviderReply>(Arena*);
template<> ::serviceProto::ProviderRequest* Arena::CreateMaybeMessage<::serviceProto::ProviderRequest>(Arena*);
template<> ::serviceProto::UserToken* Arena::CreateMaybeMessage<::serviceProto::UserToken>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace serviceProto {

// ===================================================================

class ProviderRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:serviceProto.ProviderRequest) */ {
 public:
  ProviderRequest();
  virtual ~ProviderRequest();

  ProviderRequest(const ProviderRequest& from);

  inline ProviderRequest& operator=(const ProviderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProviderRequest(ProviderRequest&& from) noexcept
    : ProviderRequest() {
    *this = ::std::move(from);
  }

  inline ProviderRequest& operator=(ProviderRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ProviderRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProviderRequest* internal_default_instance() {
    return reinterpret_cast<const ProviderRequest*>(
               &_ProviderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ProviderRequest* other);
  friend void swap(ProviderRequest& a, ProviderRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProviderRequest* New() const final {
    return CreateMaybeMessage<ProviderRequest>(nullptr);
  }

  ProviderRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProviderRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProviderRequest& from);
  void MergeFrom(const ProviderRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProviderRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Np = 1;
  void clear_np();
  static const int kNpFieldNumber = 1;
  const ::std::string& np() const;
  void set_np(const ::std::string& value);
  #if LANG_CXX11
  void set_np(::std::string&& value);
  #endif
  void set_np(const char* value);
  void set_np(const char* value, size_t size);
  ::std::string* mutable_np();
  ::std::string* release_np();
  void set_allocated_np(::std::string* np);

  // @@protoc_insertion_point(class_scope:serviceProto.ProviderRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr np_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backEndService_2eproto;
};
// -------------------------------------------------------------------

class ProviderReply final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:serviceProto.ProviderReply) */ {
 public:
  ProviderReply();
  virtual ~ProviderReply();

  ProviderReply(const ProviderReply& from);

  inline ProviderReply& operator=(const ProviderReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProviderReply(ProviderReply&& from) noexcept
    : ProviderReply() {
    *this = ::std::move(from);
  }

  inline ProviderReply& operator=(ProviderReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ProviderReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProviderReply* internal_default_instance() {
    return reinterpret_cast<const ProviderReply*>(
               &_ProviderReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ProviderReply* other);
  friend void swap(ProviderReply& a, ProviderReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProviderReply* New() const final {
    return CreateMaybeMessage<ProviderReply>(nullptr);
  }

  ProviderReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProviderReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProviderReply& from);
  void MergeFrom(const ProviderReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProviderReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Np = 1;
  void clear_np();
  static const int kNpFieldNumber = 1;
  const ::std::string& np() const;
  void set_np(const ::std::string& value);
  #if LANG_CXX11
  void set_np(::std::string&& value);
  #endif
  void set_np(const char* value);
  void set_np(const char* value, size_t size);
  ::std::string* mutable_np();
  ::std::string* release_np();
  void set_allocated_np(::std::string* np);

  // string certP = 2;
  void clear_certp();
  static const int kCertPFieldNumber = 2;
  const ::std::string& certp() const;
  void set_certp(const ::std::string& value);
  #if LANG_CXX11
  void set_certp(::std::string&& value);
  #endif
  void set_certp(const char* value);
  void set_certp(const char* value, size_t size);
  ::std::string* mutable_certp();
  ::std::string* release_certp();
  void set_allocated_certp(::std::string* certp);

  // int32 responseCode = 3;
  void clear_responsecode();
  static const int kResponseCodeFieldNumber = 3;
  ::google::protobuf::int32 responsecode() const;
  void set_responsecode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:serviceProto.ProviderReply)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr np_;
  ::google::protobuf::internal::ArenaStringPtr certp_;
  ::google::protobuf::int32 responsecode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backEndService_2eproto;
};
// -------------------------------------------------------------------

class CertP final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:serviceProto.CertP) */ {
 public:
  CertP();
  virtual ~CertP();

  CertP(const CertP& from);

  inline CertP& operator=(const CertP& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CertP(CertP&& from) noexcept
    : CertP() {
    *this = ::std::move(from);
  }

  inline CertP& operator=(CertP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CertP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CertP* internal_default_instance() {
    return reinterpret_cast<const CertP*>(
               &_CertP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CertP* other);
  friend void swap(CertP& a, CertP& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CertP* New() const final {
    return CreateMaybeMessage<CertP>(nullptr);
  }

  CertP* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CertP>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CertP& from);
  void MergeFrom(const CertP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CertP* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string certp = 1;
  void clear_certp();
  static const int kCertpFieldNumber = 1;
  const ::std::string& certp() const;
  void set_certp(const ::std::string& value);
  #if LANG_CXX11
  void set_certp(::std::string&& value);
  #endif
  void set_certp(const char* value);
  void set_certp(const char* value, size_t size);
  ::std::string* mutable_certp();
  ::std::string* release_certp();
  void set_allocated_certp(::std::string* certp);

  // @@protoc_insertion_point(class_scope:serviceProto.CertP)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr certp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backEndService_2eproto;
};
// -------------------------------------------------------------------

class ProviderID final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:serviceProto.ProviderID) */ {
 public:
  ProviderID();
  virtual ~ProviderID();

  ProviderID(const ProviderID& from);

  inline ProviderID& operator=(const ProviderID& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProviderID(ProviderID&& from) noexcept
    : ProviderID() {
    *this = ::std::move(from);
  }

  inline ProviderID& operator=(ProviderID&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ProviderID& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProviderID* internal_default_instance() {
    return reinterpret_cast<const ProviderID*>(
               &_ProviderID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ProviderID* other);
  friend void swap(ProviderID& a, ProviderID& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProviderID* New() const final {
    return CreateMaybeMessage<ProviderID>(nullptr);
  }

  ProviderID* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProviderID>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProviderID& from);
  void MergeFrom(const ProviderID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProviderID* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string providerid = 1;
  void clear_providerid();
  static const int kProvideridFieldNumber = 1;
  const ::std::string& providerid() const;
  void set_providerid(const ::std::string& value);
  #if LANG_CXX11
  void set_providerid(::std::string&& value);
  #endif
  void set_providerid(const char* value);
  void set_providerid(const char* value, size_t size);
  ::std::string* mutable_providerid();
  ::std::string* release_providerid();
  void set_allocated_providerid(::std::string* providerid);

  // @@protoc_insertion_point(class_scope:serviceProto.ProviderID)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr providerid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backEndService_2eproto;
};
// -------------------------------------------------------------------

class UserToken final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:serviceProto.UserToken) */ {
 public:
  UserToken();
  virtual ~UserToken();

  UserToken(const UserToken& from);

  inline UserToken& operator=(const UserToken& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserToken(UserToken&& from) noexcept
    : UserToken() {
    *this = ::std::move(from);
  }

  inline UserToken& operator=(UserToken&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UserToken& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserToken* internal_default_instance() {
    return reinterpret_cast<const UserToken*>(
               &_UserToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(UserToken* other);
  friend void swap(UserToken& a, UserToken& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserToken* New() const final {
    return CreateMaybeMessage<UserToken>(nullptr);
  }

  UserToken* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserToken>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserToken& from);
  void MergeFrom(const UserToken& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserToken* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:serviceProto.UserToken)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backEndService_2eproto;
};
// -------------------------------------------------------------------

class BlackListResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:serviceProto.BlackListResponse) */ {
 public:
  BlackListResponse();
  virtual ~BlackListResponse();

  BlackListResponse(const BlackListResponse& from);

  inline BlackListResponse& operator=(const BlackListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BlackListResponse(BlackListResponse&& from) noexcept
    : BlackListResponse() {
    *this = ::std::move(from);
  }

  inline BlackListResponse& operator=(BlackListResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BlackListResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlackListResponse* internal_default_instance() {
    return reinterpret_cast<const BlackListResponse*>(
               &_BlackListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(BlackListResponse* other);
  friend void swap(BlackListResponse& a, BlackListResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BlackListResponse* New() const final {
    return CreateMaybeMessage<BlackListResponse>(nullptr);
  }

  BlackListResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BlackListResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BlackListResponse& from);
  void MergeFrom(const BlackListResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlackListResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 1;
  void clear_msg();
  static const int kMsgFieldNumber = 1;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // int32 responseCode = 2;
  void clear_responsecode();
  static const int kResponseCodeFieldNumber = 2;
  ::google::protobuf::int32 responsecode() const;
  void set_responsecode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:serviceProto.BlackListResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::int32 responsecode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backEndService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProviderRequest

// string Np = 1;
inline void ProviderRequest::clear_np() {
  np_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProviderRequest::np() const {
  // @@protoc_insertion_point(field_get:serviceProto.ProviderRequest.Np)
  return np_.GetNoArena();
}
inline void ProviderRequest::set_np(const ::std::string& value) {
  
  np_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:serviceProto.ProviderRequest.Np)
}
#if LANG_CXX11
inline void ProviderRequest::set_np(::std::string&& value) {
  
  np_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:serviceProto.ProviderRequest.Np)
}
#endif
inline void ProviderRequest::set_np(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  np_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:serviceProto.ProviderRequest.Np)
}
inline void ProviderRequest::set_np(const char* value, size_t size) {
  
  np_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:serviceProto.ProviderRequest.Np)
}
inline ::std::string* ProviderRequest::mutable_np() {
  
  // @@protoc_insertion_point(field_mutable:serviceProto.ProviderRequest.Np)
  return np_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProviderRequest::release_np() {
  // @@protoc_insertion_point(field_release:serviceProto.ProviderRequest.Np)
  
  return np_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProviderRequest::set_allocated_np(::std::string* np) {
  if (np != nullptr) {
    
  } else {
    
  }
  np_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), np);
  // @@protoc_insertion_point(field_set_allocated:serviceProto.ProviderRequest.Np)
}

// -------------------------------------------------------------------

// ProviderReply

// string Np = 1;
inline void ProviderReply::clear_np() {
  np_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProviderReply::np() const {
  // @@protoc_insertion_point(field_get:serviceProto.ProviderReply.Np)
  return np_.GetNoArena();
}
inline void ProviderReply::set_np(const ::std::string& value) {
  
  np_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:serviceProto.ProviderReply.Np)
}
#if LANG_CXX11
inline void ProviderReply::set_np(::std::string&& value) {
  
  np_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:serviceProto.ProviderReply.Np)
}
#endif
inline void ProviderReply::set_np(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  np_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:serviceProto.ProviderReply.Np)
}
inline void ProviderReply::set_np(const char* value, size_t size) {
  
  np_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:serviceProto.ProviderReply.Np)
}
inline ::std::string* ProviderReply::mutable_np() {
  
  // @@protoc_insertion_point(field_mutable:serviceProto.ProviderReply.Np)
  return np_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProviderReply::release_np() {
  // @@protoc_insertion_point(field_release:serviceProto.ProviderReply.Np)
  
  return np_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProviderReply::set_allocated_np(::std::string* np) {
  if (np != nullptr) {
    
  } else {
    
  }
  np_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), np);
  // @@protoc_insertion_point(field_set_allocated:serviceProto.ProviderReply.Np)
}

// string certP = 2;
inline void ProviderReply::clear_certp() {
  certp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProviderReply::certp() const {
  // @@protoc_insertion_point(field_get:serviceProto.ProviderReply.certP)
  return certp_.GetNoArena();
}
inline void ProviderReply::set_certp(const ::std::string& value) {
  
  certp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:serviceProto.ProviderReply.certP)
}
#if LANG_CXX11
inline void ProviderReply::set_certp(::std::string&& value) {
  
  certp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:serviceProto.ProviderReply.certP)
}
#endif
inline void ProviderReply::set_certp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  certp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:serviceProto.ProviderReply.certP)
}
inline void ProviderReply::set_certp(const char* value, size_t size) {
  
  certp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:serviceProto.ProviderReply.certP)
}
inline ::std::string* ProviderReply::mutable_certp() {
  
  // @@protoc_insertion_point(field_mutable:serviceProto.ProviderReply.certP)
  return certp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProviderReply::release_certp() {
  // @@protoc_insertion_point(field_release:serviceProto.ProviderReply.certP)
  
  return certp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProviderReply::set_allocated_certp(::std::string* certp) {
  if (certp != nullptr) {
    
  } else {
    
  }
  certp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), certp);
  // @@protoc_insertion_point(field_set_allocated:serviceProto.ProviderReply.certP)
}

// int32 responseCode = 3;
inline void ProviderReply::clear_responsecode() {
  responsecode_ = 0;
}
inline ::google::protobuf::int32 ProviderReply::responsecode() const {
  // @@protoc_insertion_point(field_get:serviceProto.ProviderReply.responseCode)
  return responsecode_;
}
inline void ProviderReply::set_responsecode(::google::protobuf::int32 value) {
  
  responsecode_ = value;
  // @@protoc_insertion_point(field_set:serviceProto.ProviderReply.responseCode)
}

// -------------------------------------------------------------------

// CertP

// string certp = 1;
inline void CertP::clear_certp() {
  certp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CertP::certp() const {
  // @@protoc_insertion_point(field_get:serviceProto.CertP.certp)
  return certp_.GetNoArena();
}
inline void CertP::set_certp(const ::std::string& value) {
  
  certp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:serviceProto.CertP.certp)
}
#if LANG_CXX11
inline void CertP::set_certp(::std::string&& value) {
  
  certp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:serviceProto.CertP.certp)
}
#endif
inline void CertP::set_certp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  certp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:serviceProto.CertP.certp)
}
inline void CertP::set_certp(const char* value, size_t size) {
  
  certp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:serviceProto.CertP.certp)
}
inline ::std::string* CertP::mutable_certp() {
  
  // @@protoc_insertion_point(field_mutable:serviceProto.CertP.certp)
  return certp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CertP::release_certp() {
  // @@protoc_insertion_point(field_release:serviceProto.CertP.certp)
  
  return certp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CertP::set_allocated_certp(::std::string* certp) {
  if (certp != nullptr) {
    
  } else {
    
  }
  certp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), certp);
  // @@protoc_insertion_point(field_set_allocated:serviceProto.CertP.certp)
}

// -------------------------------------------------------------------

// ProviderID

// string providerid = 1;
inline void ProviderID::clear_providerid() {
  providerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProviderID::providerid() const {
  // @@protoc_insertion_point(field_get:serviceProto.ProviderID.providerid)
  return providerid_.GetNoArena();
}
inline void ProviderID::set_providerid(const ::std::string& value) {
  
  providerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:serviceProto.ProviderID.providerid)
}
#if LANG_CXX11
inline void ProviderID::set_providerid(::std::string&& value) {
  
  providerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:serviceProto.ProviderID.providerid)
}
#endif
inline void ProviderID::set_providerid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  providerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:serviceProto.ProviderID.providerid)
}
inline void ProviderID::set_providerid(const char* value, size_t size) {
  
  providerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:serviceProto.ProviderID.providerid)
}
inline ::std::string* ProviderID::mutable_providerid() {
  
  // @@protoc_insertion_point(field_mutable:serviceProto.ProviderID.providerid)
  return providerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProviderID::release_providerid() {
  // @@protoc_insertion_point(field_release:serviceProto.ProviderID.providerid)
  
  return providerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProviderID::set_allocated_providerid(::std::string* providerid) {
  if (providerid != nullptr) {
    
  } else {
    
  }
  providerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), providerid);
  // @@protoc_insertion_point(field_set_allocated:serviceProto.ProviderID.providerid)
}

// -------------------------------------------------------------------

// UserToken

// string token = 1;
inline void UserToken::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserToken::token() const {
  // @@protoc_insertion_point(field_get:serviceProto.UserToken.token)
  return token_.GetNoArena();
}
inline void UserToken::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:serviceProto.UserToken.token)
}
#if LANG_CXX11
inline void UserToken::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:serviceProto.UserToken.token)
}
#endif
inline void UserToken::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:serviceProto.UserToken.token)
}
inline void UserToken::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:serviceProto.UserToken.token)
}
inline ::std::string* UserToken::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:serviceProto.UserToken.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserToken::release_token() {
  // @@protoc_insertion_point(field_release:serviceProto.UserToken.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserToken::set_allocated_token(::std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:serviceProto.UserToken.token)
}

// -------------------------------------------------------------------

// BlackListResponse

// string msg = 1;
inline void BlackListResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BlackListResponse::msg() const {
  // @@protoc_insertion_point(field_get:serviceProto.BlackListResponse.msg)
  return msg_.GetNoArena();
}
inline void BlackListResponse::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:serviceProto.BlackListResponse.msg)
}
#if LANG_CXX11
inline void BlackListResponse::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:serviceProto.BlackListResponse.msg)
}
#endif
inline void BlackListResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:serviceProto.BlackListResponse.msg)
}
inline void BlackListResponse::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:serviceProto.BlackListResponse.msg)
}
inline ::std::string* BlackListResponse::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:serviceProto.BlackListResponse.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlackListResponse::release_msg() {
  // @@protoc_insertion_point(field_release:serviceProto.BlackListResponse.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlackListResponse::set_allocated_msg(::std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:serviceProto.BlackListResponse.msg)
}

// int32 responseCode = 2;
inline void BlackListResponse::clear_responsecode() {
  responsecode_ = 0;
}
inline ::google::protobuf::int32 BlackListResponse::responsecode() const {
  // @@protoc_insertion_point(field_get:serviceProto.BlackListResponse.responseCode)
  return responsecode_;
}
inline void BlackListResponse::set_responsecode(::google::protobuf::int32 value) {
  
  responsecode_ = value;
  // @@protoc_insertion_point(field_set:serviceProto.BlackListResponse.responseCode)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace serviceProto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_backEndService_2eproto
