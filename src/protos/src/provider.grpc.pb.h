// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: provider.proto
#ifndef GRPC_provider_2eproto__INCLUDED
#define GRPC_provider_2eproto__INCLUDED

#include "provider.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace providerProto {

class ProviderService final {
 public:
  static constexpr char const* service_full_name() {
    return "providerProto.ProviderService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status requestDataFromProvider(::grpc::ClientContext* context, const ::providerProto::ProviderDataRequest& request, ::providerProto::ProviderDataPayload* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::providerProto::ProviderDataPayload>> AsyncrequestDataFromProvider(::grpc::ClientContext* context, const ::providerProto::ProviderDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::providerProto::ProviderDataPayload>>(AsyncrequestDataFromProviderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::providerProto::ProviderDataPayload>> PrepareAsyncrequestDataFromProvider(::grpc::ClientContext* context, const ::providerProto::ProviderDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::providerProto::ProviderDataPayload>>(PrepareAsyncrequestDataFromProviderRaw(context, request, cq));
    }
    virtual ::grpc::Status registerUser(::grpc::ClientContext* context, const ::providerProto::UserData& request, ::providerProto::UserTokenAndSymKey* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::providerProto::UserTokenAndSymKey>> AsyncregisterUser(::grpc::ClientContext* context, const ::providerProto::UserData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::providerProto::UserTokenAndSymKey>>(AsyncregisterUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::providerProto::UserTokenAndSymKey>> PrepareAsyncregisterUser(::grpc::ClientContext* context, const ::providerProto::UserData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::providerProto::UserTokenAndSymKey>>(PrepareAsyncregisterUserRaw(context, request, cq));
    }
    virtual ::grpc::Status requestRevocation(::grpc::ClientContext* context, const ::providerProto::RevocRequest& request, ::providerProto::RevocResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::providerProto::RevocResponse>> AsyncrequestRevocation(::grpc::ClientContext* context, const ::providerProto::RevocRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::providerProto::RevocResponse>>(AsyncrequestRevocationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::providerProto::RevocResponse>> PrepareAsyncrequestRevocation(::grpc::ClientContext* context, const ::providerProto::RevocRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::providerProto::RevocResponse>>(PrepareAsyncrequestRevocationRaw(context, request, cq));
    }
    virtual ::grpc::Status renewToken(::grpc::ClientContext* context, const ::providerProto::UserCredentials& request, ::providerProto::NewToken* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::providerProto::NewToken>> AsyncrenewToken(::grpc::ClientContext* context, const ::providerProto::UserCredentials& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::providerProto::NewToken>>(AsyncrenewTokenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::providerProto::NewToken>> PrepareAsyncrenewToken(::grpc::ClientContext* context, const ::providerProto::UserCredentials& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::providerProto::NewToken>>(PrepareAsyncrenewTokenRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void requestDataFromProvider(::grpc::ClientContext* context, const ::providerProto::ProviderDataRequest* request, ::providerProto::ProviderDataPayload* response, std::function<void(::grpc::Status)>) = 0;
      virtual void requestDataFromProvider(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::providerProto::ProviderDataPayload* response, std::function<void(::grpc::Status)>) = 0;
      virtual void registerUser(::grpc::ClientContext* context, const ::providerProto::UserData* request, ::providerProto::UserTokenAndSymKey* response, std::function<void(::grpc::Status)>) = 0;
      virtual void registerUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::providerProto::UserTokenAndSymKey* response, std::function<void(::grpc::Status)>) = 0;
      virtual void requestRevocation(::grpc::ClientContext* context, const ::providerProto::RevocRequest* request, ::providerProto::RevocResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void requestRevocation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::providerProto::RevocResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void renewToken(::grpc::ClientContext* context, const ::providerProto::UserCredentials* request, ::providerProto::NewToken* response, std::function<void(::grpc::Status)>) = 0;
      virtual void renewToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::providerProto::NewToken* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::providerProto::ProviderDataPayload>* AsyncrequestDataFromProviderRaw(::grpc::ClientContext* context, const ::providerProto::ProviderDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::providerProto::ProviderDataPayload>* PrepareAsyncrequestDataFromProviderRaw(::grpc::ClientContext* context, const ::providerProto::ProviderDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::providerProto::UserTokenAndSymKey>* AsyncregisterUserRaw(::grpc::ClientContext* context, const ::providerProto::UserData& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::providerProto::UserTokenAndSymKey>* PrepareAsyncregisterUserRaw(::grpc::ClientContext* context, const ::providerProto::UserData& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::providerProto::RevocResponse>* AsyncrequestRevocationRaw(::grpc::ClientContext* context, const ::providerProto::RevocRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::providerProto::RevocResponse>* PrepareAsyncrequestRevocationRaw(::grpc::ClientContext* context, const ::providerProto::RevocRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::providerProto::NewToken>* AsyncrenewTokenRaw(::grpc::ClientContext* context, const ::providerProto::UserCredentials& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::providerProto::NewToken>* PrepareAsyncrenewTokenRaw(::grpc::ClientContext* context, const ::providerProto::UserCredentials& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status requestDataFromProvider(::grpc::ClientContext* context, const ::providerProto::ProviderDataRequest& request, ::providerProto::ProviderDataPayload* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::providerProto::ProviderDataPayload>> AsyncrequestDataFromProvider(::grpc::ClientContext* context, const ::providerProto::ProviderDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::providerProto::ProviderDataPayload>>(AsyncrequestDataFromProviderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::providerProto::ProviderDataPayload>> PrepareAsyncrequestDataFromProvider(::grpc::ClientContext* context, const ::providerProto::ProviderDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::providerProto::ProviderDataPayload>>(PrepareAsyncrequestDataFromProviderRaw(context, request, cq));
    }
    ::grpc::Status registerUser(::grpc::ClientContext* context, const ::providerProto::UserData& request, ::providerProto::UserTokenAndSymKey* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::providerProto::UserTokenAndSymKey>> AsyncregisterUser(::grpc::ClientContext* context, const ::providerProto::UserData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::providerProto::UserTokenAndSymKey>>(AsyncregisterUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::providerProto::UserTokenAndSymKey>> PrepareAsyncregisterUser(::grpc::ClientContext* context, const ::providerProto::UserData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::providerProto::UserTokenAndSymKey>>(PrepareAsyncregisterUserRaw(context, request, cq));
    }
    ::grpc::Status requestRevocation(::grpc::ClientContext* context, const ::providerProto::RevocRequest& request, ::providerProto::RevocResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::providerProto::RevocResponse>> AsyncrequestRevocation(::grpc::ClientContext* context, const ::providerProto::RevocRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::providerProto::RevocResponse>>(AsyncrequestRevocationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::providerProto::RevocResponse>> PrepareAsyncrequestRevocation(::grpc::ClientContext* context, const ::providerProto::RevocRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::providerProto::RevocResponse>>(PrepareAsyncrequestRevocationRaw(context, request, cq));
    }
    ::grpc::Status renewToken(::grpc::ClientContext* context, const ::providerProto::UserCredentials& request, ::providerProto::NewToken* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::providerProto::NewToken>> AsyncrenewToken(::grpc::ClientContext* context, const ::providerProto::UserCredentials& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::providerProto::NewToken>>(AsyncrenewTokenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::providerProto::NewToken>> PrepareAsyncrenewToken(::grpc::ClientContext* context, const ::providerProto::UserCredentials& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::providerProto::NewToken>>(PrepareAsyncrenewTokenRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void requestDataFromProvider(::grpc::ClientContext* context, const ::providerProto::ProviderDataRequest* request, ::providerProto::ProviderDataPayload* response, std::function<void(::grpc::Status)>) override;
      void requestDataFromProvider(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::providerProto::ProviderDataPayload* response, std::function<void(::grpc::Status)>) override;
      void registerUser(::grpc::ClientContext* context, const ::providerProto::UserData* request, ::providerProto::UserTokenAndSymKey* response, std::function<void(::grpc::Status)>) override;
      void registerUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::providerProto::UserTokenAndSymKey* response, std::function<void(::grpc::Status)>) override;
      void requestRevocation(::grpc::ClientContext* context, const ::providerProto::RevocRequest* request, ::providerProto::RevocResponse* response, std::function<void(::grpc::Status)>) override;
      void requestRevocation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::providerProto::RevocResponse* response, std::function<void(::grpc::Status)>) override;
      void renewToken(::grpc::ClientContext* context, const ::providerProto::UserCredentials* request, ::providerProto::NewToken* response, std::function<void(::grpc::Status)>) override;
      void renewToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::providerProto::NewToken* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::providerProto::ProviderDataPayload>* AsyncrequestDataFromProviderRaw(::grpc::ClientContext* context, const ::providerProto::ProviderDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::providerProto::ProviderDataPayload>* PrepareAsyncrequestDataFromProviderRaw(::grpc::ClientContext* context, const ::providerProto::ProviderDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::providerProto::UserTokenAndSymKey>* AsyncregisterUserRaw(::grpc::ClientContext* context, const ::providerProto::UserData& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::providerProto::UserTokenAndSymKey>* PrepareAsyncregisterUserRaw(::grpc::ClientContext* context, const ::providerProto::UserData& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::providerProto::RevocResponse>* AsyncrequestRevocationRaw(::grpc::ClientContext* context, const ::providerProto::RevocRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::providerProto::RevocResponse>* PrepareAsyncrequestRevocationRaw(::grpc::ClientContext* context, const ::providerProto::RevocRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::providerProto::NewToken>* AsyncrenewTokenRaw(::grpc::ClientContext* context, const ::providerProto::UserCredentials& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::providerProto::NewToken>* PrepareAsyncrenewTokenRaw(::grpc::ClientContext* context, const ::providerProto::UserCredentials& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_requestDataFromProvider_;
    const ::grpc::internal::RpcMethod rpcmethod_registerUser_;
    const ::grpc::internal::RpcMethod rpcmethod_requestRevocation_;
    const ::grpc::internal::RpcMethod rpcmethod_renewToken_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status requestDataFromProvider(::grpc::ServerContext* context, const ::providerProto::ProviderDataRequest* request, ::providerProto::ProviderDataPayload* response);
    virtual ::grpc::Status registerUser(::grpc::ServerContext* context, const ::providerProto::UserData* request, ::providerProto::UserTokenAndSymKey* response);
    virtual ::grpc::Status requestRevocation(::grpc::ServerContext* context, const ::providerProto::RevocRequest* request, ::providerProto::RevocResponse* response);
    virtual ::grpc::Status renewToken(::grpc::ServerContext* context, const ::providerProto::UserCredentials* request, ::providerProto::NewToken* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_requestDataFromProvider : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_requestDataFromProvider() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_requestDataFromProvider() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestDataFromProvider(::grpc::ServerContext* context, const ::providerProto::ProviderDataRequest* request, ::providerProto::ProviderDataPayload* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrequestDataFromProvider(::grpc::ServerContext* context, ::providerProto::ProviderDataRequest* request, ::grpc::ServerAsyncResponseWriter< ::providerProto::ProviderDataPayload>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_registerUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_registerUser() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_registerUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerUser(::grpc::ServerContext* context, const ::providerProto::UserData* request, ::providerProto::UserTokenAndSymKey* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestregisterUser(::grpc::ServerContext* context, ::providerProto::UserData* request, ::grpc::ServerAsyncResponseWriter< ::providerProto::UserTokenAndSymKey>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_requestRevocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_requestRevocation() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_requestRevocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestRevocation(::grpc::ServerContext* context, const ::providerProto::RevocRequest* request, ::providerProto::RevocResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrequestRevocation(::grpc::ServerContext* context, ::providerProto::RevocRequest* request, ::grpc::ServerAsyncResponseWriter< ::providerProto::RevocResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_renewToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_renewToken() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_renewToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status renewToken(::grpc::ServerContext* context, const ::providerProto::UserCredentials* request, ::providerProto::NewToken* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrenewToken(::grpc::ServerContext* context, ::providerProto::UserCredentials* request, ::grpc::ServerAsyncResponseWriter< ::providerProto::NewToken>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_requestDataFromProvider<WithAsyncMethod_registerUser<WithAsyncMethod_requestRevocation<WithAsyncMethod_renewToken<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_requestDataFromProvider : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_requestDataFromProvider() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::providerProto::ProviderDataRequest, ::providerProto::ProviderDataPayload>(
          [this](::grpc::ServerContext* context,
                 const ::providerProto::ProviderDataRequest* request,
                 ::providerProto::ProviderDataPayload* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->requestDataFromProvider(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_requestDataFromProvider() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestDataFromProvider(::grpc::ServerContext* context, const ::providerProto::ProviderDataRequest* request, ::providerProto::ProviderDataPayload* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void requestDataFromProvider(::grpc::ServerContext* context, const ::providerProto::ProviderDataRequest* request, ::providerProto::ProviderDataPayload* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_registerUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_registerUser() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::providerProto::UserData, ::providerProto::UserTokenAndSymKey>(
          [this](::grpc::ServerContext* context,
                 const ::providerProto::UserData* request,
                 ::providerProto::UserTokenAndSymKey* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->registerUser(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_registerUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerUser(::grpc::ServerContext* context, const ::providerProto::UserData* request, ::providerProto::UserTokenAndSymKey* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void registerUser(::grpc::ServerContext* context, const ::providerProto::UserData* request, ::providerProto::UserTokenAndSymKey* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_requestRevocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_requestRevocation() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::providerProto::RevocRequest, ::providerProto::RevocResponse>(
          [this](::grpc::ServerContext* context,
                 const ::providerProto::RevocRequest* request,
                 ::providerProto::RevocResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->requestRevocation(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_requestRevocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestRevocation(::grpc::ServerContext* context, const ::providerProto::RevocRequest* request, ::providerProto::RevocResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void requestRevocation(::grpc::ServerContext* context, const ::providerProto::RevocRequest* request, ::providerProto::RevocResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_renewToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_renewToken() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::providerProto::UserCredentials, ::providerProto::NewToken>(
          [this](::grpc::ServerContext* context,
                 const ::providerProto::UserCredentials* request,
                 ::providerProto::NewToken* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->renewToken(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_renewToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status renewToken(::grpc::ServerContext* context, const ::providerProto::UserCredentials* request, ::providerProto::NewToken* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void renewToken(::grpc::ServerContext* context, const ::providerProto::UserCredentials* request, ::providerProto::NewToken* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_requestDataFromProvider<ExperimentalWithCallbackMethod_registerUser<ExperimentalWithCallbackMethod_requestRevocation<ExperimentalWithCallbackMethod_renewToken<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_requestDataFromProvider : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_requestDataFromProvider() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_requestDataFromProvider() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestDataFromProvider(::grpc::ServerContext* context, const ::providerProto::ProviderDataRequest* request, ::providerProto::ProviderDataPayload* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_registerUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_registerUser() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_registerUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerUser(::grpc::ServerContext* context, const ::providerProto::UserData* request, ::providerProto::UserTokenAndSymKey* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_requestRevocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_requestRevocation() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_requestRevocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestRevocation(::grpc::ServerContext* context, const ::providerProto::RevocRequest* request, ::providerProto::RevocResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_renewToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_renewToken() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_renewToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status renewToken(::grpc::ServerContext* context, const ::providerProto::UserCredentials* request, ::providerProto::NewToken* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_requestDataFromProvider : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_requestDataFromProvider() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_requestDataFromProvider() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestDataFromProvider(::grpc::ServerContext* context, const ::providerProto::ProviderDataRequest* request, ::providerProto::ProviderDataPayload* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrequestDataFromProvider(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_registerUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_registerUser() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_registerUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerUser(::grpc::ServerContext* context, const ::providerProto::UserData* request, ::providerProto::UserTokenAndSymKey* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestregisterUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_requestRevocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_requestRevocation() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_requestRevocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestRevocation(::grpc::ServerContext* context, const ::providerProto::RevocRequest* request, ::providerProto::RevocResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrequestRevocation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_renewToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_renewToken() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_renewToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status renewToken(::grpc::ServerContext* context, const ::providerProto::UserCredentials* request, ::providerProto::NewToken* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrenewToken(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_requestDataFromProvider : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_requestDataFromProvider() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->requestDataFromProvider(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_requestDataFromProvider() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestDataFromProvider(::grpc::ServerContext* context, const ::providerProto::ProviderDataRequest* request, ::providerProto::ProviderDataPayload* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void requestDataFromProvider(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_registerUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_registerUser() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->registerUser(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_registerUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerUser(::grpc::ServerContext* context, const ::providerProto::UserData* request, ::providerProto::UserTokenAndSymKey* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void registerUser(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_requestRevocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_requestRevocation() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->requestRevocation(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_requestRevocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestRevocation(::grpc::ServerContext* context, const ::providerProto::RevocRequest* request, ::providerProto::RevocResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void requestRevocation(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_renewToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_renewToken() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->renewToken(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_renewToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status renewToken(::grpc::ServerContext* context, const ::providerProto::UserCredentials* request, ::providerProto::NewToken* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void renewToken(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_requestDataFromProvider : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_requestDataFromProvider() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::providerProto::ProviderDataRequest, ::providerProto::ProviderDataPayload>(std::bind(&WithStreamedUnaryMethod_requestDataFromProvider<BaseClass>::StreamedrequestDataFromProvider, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_requestDataFromProvider() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status requestDataFromProvider(::grpc::ServerContext* context, const ::providerProto::ProviderDataRequest* request, ::providerProto::ProviderDataPayload* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedrequestDataFromProvider(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::providerProto::ProviderDataRequest,::providerProto::ProviderDataPayload>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_registerUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_registerUser() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::providerProto::UserData, ::providerProto::UserTokenAndSymKey>(std::bind(&WithStreamedUnaryMethod_registerUser<BaseClass>::StreamedregisterUser, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_registerUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status registerUser(::grpc::ServerContext* context, const ::providerProto::UserData* request, ::providerProto::UserTokenAndSymKey* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedregisterUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::providerProto::UserData,::providerProto::UserTokenAndSymKey>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_requestRevocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_requestRevocation() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::providerProto::RevocRequest, ::providerProto::RevocResponse>(std::bind(&WithStreamedUnaryMethod_requestRevocation<BaseClass>::StreamedrequestRevocation, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_requestRevocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status requestRevocation(::grpc::ServerContext* context, const ::providerProto::RevocRequest* request, ::providerProto::RevocResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedrequestRevocation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::providerProto::RevocRequest,::providerProto::RevocResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_renewToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_renewToken() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::providerProto::UserCredentials, ::providerProto::NewToken>(std::bind(&WithStreamedUnaryMethod_renewToken<BaseClass>::StreamedrenewToken, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_renewToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status renewToken(::grpc::ServerContext* context, const ::providerProto::UserCredentials* request, ::providerProto::NewToken* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedrenewToken(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::providerProto::UserCredentials,::providerProto::NewToken>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_requestDataFromProvider<WithStreamedUnaryMethod_registerUser<WithStreamedUnaryMethod_requestRevocation<WithStreamedUnaryMethod_renewToken<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_requestDataFromProvider<WithStreamedUnaryMethod_registerUser<WithStreamedUnaryMethod_requestRevocation<WithStreamedUnaryMethod_renewToken<Service > > > > StreamedService;
};

}  // namespace providerProto


#endif  // GRPC_provider_2eproto__INCLUDED
