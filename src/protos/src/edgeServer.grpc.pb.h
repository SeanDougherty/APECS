// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: edgeServer.proto
#ifndef GRPC_edgeServer_2eproto__INCLUDED
#define GRPC_edgeServer_2eproto__INCLUDED

#include "edgeServer.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace edgeServerProto {

class EdgeServerService final {
 public:
  static constexpr char const* service_full_name() {
    return "edgeServerProto.EdgeServerService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // User sends data request to Edge Server
    virtual ::grpc::Status requestData(::grpc::ClientContext* context, const ::edgeServerProto::UserDataRequest& request, ::edgeServerProto::DataPayload* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgeServerProto::DataPayload>> AsyncrequestData(::grpc::ClientContext* context, const ::edgeServerProto::UserDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgeServerProto::DataPayload>>(AsyncrequestDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgeServerProto::DataPayload>> PrepareAsyncrequestData(::grpc::ClientContext* context, const ::edgeServerProto::UserDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgeServerProto::DataPayload>>(PrepareAsyncrequestDataRaw(context, request, cq));
    }
    virtual ::grpc::Status requestService(::grpc::ClientContext* context, const ::edgeServerProto::UserServiceRequest& request, ::edgeServerProto::ServiceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgeServerProto::ServiceResponse>> AsyncrequestService(::grpc::ClientContext* context, const ::edgeServerProto::UserServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgeServerProto::ServiceResponse>>(AsyncrequestServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgeServerProto::ServiceResponse>> PrepareAsyncrequestService(::grpc::ClientContext* context, const ::edgeServerProto::UserServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgeServerProto::ServiceResponse>>(PrepareAsyncrequestServiceRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // User sends data request to Edge Server
      virtual void requestData(::grpc::ClientContext* context, const ::edgeServerProto::UserDataRequest* request, ::edgeServerProto::DataPayload* response, std::function<void(::grpc::Status)>) = 0;
      virtual void requestData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::edgeServerProto::DataPayload* response, std::function<void(::grpc::Status)>) = 0;
      virtual void requestService(::grpc::ClientContext* context, const ::edgeServerProto::UserServiceRequest* request, ::edgeServerProto::ServiceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void requestService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::edgeServerProto::ServiceResponse* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::edgeServerProto::DataPayload>* AsyncrequestDataRaw(::grpc::ClientContext* context, const ::edgeServerProto::UserDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::edgeServerProto::DataPayload>* PrepareAsyncrequestDataRaw(::grpc::ClientContext* context, const ::edgeServerProto::UserDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::edgeServerProto::ServiceResponse>* AsyncrequestServiceRaw(::grpc::ClientContext* context, const ::edgeServerProto::UserServiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::edgeServerProto::ServiceResponse>* PrepareAsyncrequestServiceRaw(::grpc::ClientContext* context, const ::edgeServerProto::UserServiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status requestData(::grpc::ClientContext* context, const ::edgeServerProto::UserDataRequest& request, ::edgeServerProto::DataPayload* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgeServerProto::DataPayload>> AsyncrequestData(::grpc::ClientContext* context, const ::edgeServerProto::UserDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgeServerProto::DataPayload>>(AsyncrequestDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgeServerProto::DataPayload>> PrepareAsyncrequestData(::grpc::ClientContext* context, const ::edgeServerProto::UserDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgeServerProto::DataPayload>>(PrepareAsyncrequestDataRaw(context, request, cq));
    }
    ::grpc::Status requestService(::grpc::ClientContext* context, const ::edgeServerProto::UserServiceRequest& request, ::edgeServerProto::ServiceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgeServerProto::ServiceResponse>> AsyncrequestService(::grpc::ClientContext* context, const ::edgeServerProto::UserServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgeServerProto::ServiceResponse>>(AsyncrequestServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgeServerProto::ServiceResponse>> PrepareAsyncrequestService(::grpc::ClientContext* context, const ::edgeServerProto::UserServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgeServerProto::ServiceResponse>>(PrepareAsyncrequestServiceRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void requestData(::grpc::ClientContext* context, const ::edgeServerProto::UserDataRequest* request, ::edgeServerProto::DataPayload* response, std::function<void(::grpc::Status)>) override;
      void requestData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::edgeServerProto::DataPayload* response, std::function<void(::grpc::Status)>) override;
      void requestService(::grpc::ClientContext* context, const ::edgeServerProto::UserServiceRequest* request, ::edgeServerProto::ServiceResponse* response, std::function<void(::grpc::Status)>) override;
      void requestService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::edgeServerProto::ServiceResponse* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::edgeServerProto::DataPayload>* AsyncrequestDataRaw(::grpc::ClientContext* context, const ::edgeServerProto::UserDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::edgeServerProto::DataPayload>* PrepareAsyncrequestDataRaw(::grpc::ClientContext* context, const ::edgeServerProto::UserDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::edgeServerProto::ServiceResponse>* AsyncrequestServiceRaw(::grpc::ClientContext* context, const ::edgeServerProto::UserServiceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::edgeServerProto::ServiceResponse>* PrepareAsyncrequestServiceRaw(::grpc::ClientContext* context, const ::edgeServerProto::UserServiceRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_requestData_;
    const ::grpc::internal::RpcMethod rpcmethod_requestService_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // User sends data request to Edge Server
    virtual ::grpc::Status requestData(::grpc::ServerContext* context, const ::edgeServerProto::UserDataRequest* request, ::edgeServerProto::DataPayload* response);
    virtual ::grpc::Status requestService(::grpc::ServerContext* context, const ::edgeServerProto::UserServiceRequest* request, ::edgeServerProto::ServiceResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_requestData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_requestData() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_requestData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestData(::grpc::ServerContext* context, const ::edgeServerProto::UserDataRequest* request, ::edgeServerProto::DataPayload* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrequestData(::grpc::ServerContext* context, ::edgeServerProto::UserDataRequest* request, ::grpc::ServerAsyncResponseWriter< ::edgeServerProto::DataPayload>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_requestService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_requestService() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_requestService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestService(::grpc::ServerContext* context, const ::edgeServerProto::UserServiceRequest* request, ::edgeServerProto::ServiceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrequestService(::grpc::ServerContext* context, ::edgeServerProto::UserServiceRequest* request, ::grpc::ServerAsyncResponseWriter< ::edgeServerProto::ServiceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_requestData<WithAsyncMethod_requestService<Service > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_requestData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_requestData() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::edgeServerProto::UserDataRequest, ::edgeServerProto::DataPayload>(
          [this](::grpc::ServerContext* context,
                 const ::edgeServerProto::UserDataRequest* request,
                 ::edgeServerProto::DataPayload* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->requestData(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_requestData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestData(::grpc::ServerContext* context, const ::edgeServerProto::UserDataRequest* request, ::edgeServerProto::DataPayload* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void requestData(::grpc::ServerContext* context, const ::edgeServerProto::UserDataRequest* request, ::edgeServerProto::DataPayload* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_requestService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_requestService() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::edgeServerProto::UserServiceRequest, ::edgeServerProto::ServiceResponse>(
          [this](::grpc::ServerContext* context,
                 const ::edgeServerProto::UserServiceRequest* request,
                 ::edgeServerProto::ServiceResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->requestService(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_requestService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestService(::grpc::ServerContext* context, const ::edgeServerProto::UserServiceRequest* request, ::edgeServerProto::ServiceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void requestService(::grpc::ServerContext* context, const ::edgeServerProto::UserServiceRequest* request, ::edgeServerProto::ServiceResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_requestData<ExperimentalWithCallbackMethod_requestService<Service > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_requestData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_requestData() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_requestData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestData(::grpc::ServerContext* context, const ::edgeServerProto::UserDataRequest* request, ::edgeServerProto::DataPayload* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_requestService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_requestService() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_requestService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestService(::grpc::ServerContext* context, const ::edgeServerProto::UserServiceRequest* request, ::edgeServerProto::ServiceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_requestData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_requestData() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_requestData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestData(::grpc::ServerContext* context, const ::edgeServerProto::UserDataRequest* request, ::edgeServerProto::DataPayload* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrequestData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_requestService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_requestService() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_requestService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestService(::grpc::ServerContext* context, const ::edgeServerProto::UserServiceRequest* request, ::edgeServerProto::ServiceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrequestService(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_requestData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_requestData() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->requestData(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_requestData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestData(::grpc::ServerContext* context, const ::edgeServerProto::UserDataRequest* request, ::edgeServerProto::DataPayload* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void requestData(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_requestService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_requestService() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->requestService(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_requestService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestService(::grpc::ServerContext* context, const ::edgeServerProto::UserServiceRequest* request, ::edgeServerProto::ServiceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void requestService(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_requestData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_requestData() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::edgeServerProto::UserDataRequest, ::edgeServerProto::DataPayload>(std::bind(&WithStreamedUnaryMethod_requestData<BaseClass>::StreamedrequestData, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_requestData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status requestData(::grpc::ServerContext* context, const ::edgeServerProto::UserDataRequest* request, ::edgeServerProto::DataPayload* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedrequestData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::edgeServerProto::UserDataRequest,::edgeServerProto::DataPayload>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_requestService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_requestService() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::edgeServerProto::UserServiceRequest, ::edgeServerProto::ServiceResponse>(std::bind(&WithStreamedUnaryMethod_requestService<BaseClass>::StreamedrequestService, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_requestService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status requestService(::grpc::ServerContext* context, const ::edgeServerProto::UserServiceRequest* request, ::edgeServerProto::ServiceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedrequestService(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::edgeServerProto::UserServiceRequest,::edgeServerProto::ServiceResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_requestData<WithStreamedUnaryMethod_requestService<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_requestData<WithStreamedUnaryMethod_requestService<Service > > StreamedService;
};

}  // namespace edgeServerProto


#endif  // GRPC_edgeServer_2eproto__INCLUDED
