// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: test.proto

#include "test.pb.h"
#include "test.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace testProto {

static const char* Test_method_names[] = {
  "/testProto.Test/testMe",
  "/testProto.Test/gProvider",
};

std::unique_ptr< Test::Stub> Test::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Test::Stub> stub(new Test::Stub(channel));
  return stub;
}

Test::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_testMe_(Test_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_gProvider_(Test_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Test::Stub::testMe(::grpc::ClientContext* context, const ::testProto::TestRequest& request, ::testProto::TestReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_testMe_, context, request, response);
}

void Test::Stub::experimental_async::testMe(::grpc::ClientContext* context, const ::testProto::TestRequest* request, ::testProto::TestReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_testMe_, context, request, response, std::move(f));
}

void Test::Stub::experimental_async::testMe(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::testProto::TestReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_testMe_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::testProto::TestReply>* Test::Stub::AsynctestMeRaw(::grpc::ClientContext* context, const ::testProto::TestRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::testProto::TestReply>::Create(channel_.get(), cq, rpcmethod_testMe_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::testProto::TestReply>* Test::Stub::PrepareAsynctestMeRaw(::grpc::ClientContext* context, const ::testProto::TestRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::testProto::TestReply>::Create(channel_.get(), cq, rpcmethod_testMe_, context, request, false);
}

::grpc::Status Test::Stub::gProvider(::grpc::ClientContext* context, const ::testProto::ProviderRequest& request, ::testProto::ProviderReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_gProvider_, context, request, response);
}

void Test::Stub::experimental_async::gProvider(::grpc::ClientContext* context, const ::testProto::ProviderRequest* request, ::testProto::ProviderReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_gProvider_, context, request, response, std::move(f));
}

void Test::Stub::experimental_async::gProvider(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::testProto::ProviderReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_gProvider_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::testProto::ProviderReply>* Test::Stub::AsyncgProviderRaw(::grpc::ClientContext* context, const ::testProto::ProviderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::testProto::ProviderReply>::Create(channel_.get(), cq, rpcmethod_gProvider_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::testProto::ProviderReply>* Test::Stub::PrepareAsyncgProviderRaw(::grpc::ClientContext* context, const ::testProto::ProviderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::testProto::ProviderReply>::Create(channel_.get(), cq, rpcmethod_gProvider_, context, request, false);
}

Test::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Test_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Test::Service, ::testProto::TestRequest, ::testProto::TestReply>(
          std::mem_fn(&Test::Service::testMe), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Test_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Test::Service, ::testProto::ProviderRequest, ::testProto::ProviderReply>(
          std::mem_fn(&Test::Service::gProvider), this)));
}

Test::Service::~Service() {
}

::grpc::Status Test::Service::testMe(::grpc::ServerContext* context, const ::testProto::TestRequest* request, ::testProto::TestReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Test::Service::gProvider(::grpc::ServerContext* context, const ::testProto::ProviderRequest* request, ::testProto::ProviderReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace testProto

