// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: provider.proto

#include "provider.pb.h"
#include "provider.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace providerProto {

static const char* ProviderService_method_names[] = {
  "/providerProto.ProviderService/requestDataFromProvider",
  "/providerProto.ProviderService/registerUser",
  "/providerProto.ProviderService/requestRevocation",
  "/providerProto.ProviderService/renewToken",
};

std::unique_ptr< ProviderService::Stub> ProviderService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ProviderService::Stub> stub(new ProviderService::Stub(channel));
  return stub;
}

ProviderService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_requestDataFromProvider_(ProviderService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_registerUser_(ProviderService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_requestRevocation_(ProviderService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_renewToken_(ProviderService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ProviderService::Stub::requestDataFromProvider(::grpc::ClientContext* context, const ::providerProto::ProviderDataRequest& request, ::providerProto::ProviderDataPayload* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_requestDataFromProvider_, context, request, response);
}

void ProviderService::Stub::experimental_async::requestDataFromProvider(::grpc::ClientContext* context, const ::providerProto::ProviderDataRequest* request, ::providerProto::ProviderDataPayload* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_requestDataFromProvider_, context, request, response, std::move(f));
}

void ProviderService::Stub::experimental_async::requestDataFromProvider(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::providerProto::ProviderDataPayload* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_requestDataFromProvider_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::providerProto::ProviderDataPayload>* ProviderService::Stub::AsyncrequestDataFromProviderRaw(::grpc::ClientContext* context, const ::providerProto::ProviderDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::providerProto::ProviderDataPayload>::Create(channel_.get(), cq, rpcmethod_requestDataFromProvider_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::providerProto::ProviderDataPayload>* ProviderService::Stub::PrepareAsyncrequestDataFromProviderRaw(::grpc::ClientContext* context, const ::providerProto::ProviderDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::providerProto::ProviderDataPayload>::Create(channel_.get(), cq, rpcmethod_requestDataFromProvider_, context, request, false);
}

::grpc::Status ProviderService::Stub::registerUser(::grpc::ClientContext* context, const ::providerProto::UserData& request, ::providerProto::UserTokenAndSymKey* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_registerUser_, context, request, response);
}

void ProviderService::Stub::experimental_async::registerUser(::grpc::ClientContext* context, const ::providerProto::UserData* request, ::providerProto::UserTokenAndSymKey* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_registerUser_, context, request, response, std::move(f));
}

void ProviderService::Stub::experimental_async::registerUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::providerProto::UserTokenAndSymKey* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_registerUser_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::providerProto::UserTokenAndSymKey>* ProviderService::Stub::AsyncregisterUserRaw(::grpc::ClientContext* context, const ::providerProto::UserData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::providerProto::UserTokenAndSymKey>::Create(channel_.get(), cq, rpcmethod_registerUser_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::providerProto::UserTokenAndSymKey>* ProviderService::Stub::PrepareAsyncregisterUserRaw(::grpc::ClientContext* context, const ::providerProto::UserData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::providerProto::UserTokenAndSymKey>::Create(channel_.get(), cq, rpcmethod_registerUser_, context, request, false);
}

::grpc::Status ProviderService::Stub::requestRevocation(::grpc::ClientContext* context, const ::providerProto::RevocRequest& request, ::providerProto::RevocResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_requestRevocation_, context, request, response);
}

void ProviderService::Stub::experimental_async::requestRevocation(::grpc::ClientContext* context, const ::providerProto::RevocRequest* request, ::providerProto::RevocResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_requestRevocation_, context, request, response, std::move(f));
}

void ProviderService::Stub::experimental_async::requestRevocation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::providerProto::RevocResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_requestRevocation_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::providerProto::RevocResponse>* ProviderService::Stub::AsyncrequestRevocationRaw(::grpc::ClientContext* context, const ::providerProto::RevocRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::providerProto::RevocResponse>::Create(channel_.get(), cq, rpcmethod_requestRevocation_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::providerProto::RevocResponse>* ProviderService::Stub::PrepareAsyncrequestRevocationRaw(::grpc::ClientContext* context, const ::providerProto::RevocRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::providerProto::RevocResponse>::Create(channel_.get(), cq, rpcmethod_requestRevocation_, context, request, false);
}

::grpc::Status ProviderService::Stub::renewToken(::grpc::ClientContext* context, const ::providerProto::UserCredentials& request, ::providerProto::NewToken* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_renewToken_, context, request, response);
}

void ProviderService::Stub::experimental_async::renewToken(::grpc::ClientContext* context, const ::providerProto::UserCredentials* request, ::providerProto::NewToken* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_renewToken_, context, request, response, std::move(f));
}

void ProviderService::Stub::experimental_async::renewToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::providerProto::NewToken* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_renewToken_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::providerProto::NewToken>* ProviderService::Stub::AsyncrenewTokenRaw(::grpc::ClientContext* context, const ::providerProto::UserCredentials& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::providerProto::NewToken>::Create(channel_.get(), cq, rpcmethod_renewToken_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::providerProto::NewToken>* ProviderService::Stub::PrepareAsyncrenewTokenRaw(::grpc::ClientContext* context, const ::providerProto::UserCredentials& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::providerProto::NewToken>::Create(channel_.get(), cq, rpcmethod_renewToken_, context, request, false);
}

ProviderService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProviderService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProviderService::Service, ::providerProto::ProviderDataRequest, ::providerProto::ProviderDataPayload>(
          std::mem_fn(&ProviderService::Service::requestDataFromProvider), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProviderService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProviderService::Service, ::providerProto::UserData, ::providerProto::UserTokenAndSymKey>(
          std::mem_fn(&ProviderService::Service::registerUser), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProviderService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProviderService::Service, ::providerProto::RevocRequest, ::providerProto::RevocResponse>(
          std::mem_fn(&ProviderService::Service::requestRevocation), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProviderService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProviderService::Service, ::providerProto::UserCredentials, ::providerProto::NewToken>(
          std::mem_fn(&ProviderService::Service::renewToken), this)));
}

ProviderService::Service::~Service() {
}

::grpc::Status ProviderService::Service::requestDataFromProvider(::grpc::ServerContext* context, const ::providerProto::ProviderDataRequest* request, ::providerProto::ProviderDataPayload* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProviderService::Service::registerUser(::grpc::ServerContext* context, const ::providerProto::UserData* request, ::providerProto::UserTokenAndSymKey* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProviderService::Service::requestRevocation(::grpc::ServerContext* context, const ::providerProto::RevocRequest* request, ::providerProto::RevocResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProviderService::Service::renewToken(::grpc::ServerContext* context, const ::providerProto::UserCredentials* request, ::providerProto::NewToken* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace providerProto

