// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#include "test.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace testProto {
class ProviderRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProviderRequest> _instance;
} _ProviderRequest_default_instance_;
class ProviderReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProviderReply> _instance;
} _ProviderReply_default_instance_;
class TestRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TestRequest> _instance;
} _TestRequest_default_instance_;
class TestReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TestReply> _instance;
} _TestReply_default_instance_;
}  // namespace testProto
static void InitDefaultsProviderRequest_test_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::testProto::_ProviderRequest_default_instance_;
    new (ptr) ::testProto::ProviderRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::testProto::ProviderRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ProviderRequest_test_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProviderRequest_test_2eproto}, {}};

static void InitDefaultsProviderReply_test_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::testProto::_ProviderReply_default_instance_;
    new (ptr) ::testProto::ProviderReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::testProto::ProviderReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ProviderReply_test_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProviderReply_test_2eproto}, {}};

static void InitDefaultsTestRequest_test_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::testProto::_TestRequest_default_instance_;
    new (ptr) ::testProto::TestRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::testProto::TestRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TestRequest_test_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTestRequest_test_2eproto}, {}};

static void InitDefaultsTestReply_test_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::testProto::_TestReply_default_instance_;
    new (ptr) ::testProto::TestReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::testProto::TestReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TestReply_test_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTestReply_test_2eproto}, {}};

void InitDefaults_test_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_ProviderRequest_test_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ProviderReply_test_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TestRequest_test_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TestReply_test_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_test_2eproto[4];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_test_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_test_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_test_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testProto::ProviderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::testProto::ProviderRequest, np_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testProto::ProviderReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::testProto::ProviderReply, np_),
  PROTOBUF_FIELD_OFFSET(::testProto::ProviderReply, certp_),
  PROTOBUF_FIELD_OFFSET(::testProto::ProviderReply, responsecode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testProto::TestRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::testProto::TestRequest, teststringrequest_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testProto::TestReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::testProto::TestReply, teststringreply_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::testProto::ProviderRequest)},
  { 6, -1, sizeof(::testProto::ProviderReply)},
  { 14, -1, sizeof(::testProto::TestRequest)},
  { 20, -1, sizeof(::testProto::TestReply)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::testProto::_ProviderRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::testProto::_ProviderReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::testProto::_TestRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::testProto::_TestReply_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_test_2eproto = {
  {}, AddDescriptors_test_2eproto, "test.proto", schemas,
  file_default_instances, TableStruct_test_2eproto::offsets,
  file_level_metadata_test_2eproto, 4, file_level_enum_descriptors_test_2eproto, file_level_service_descriptors_test_2eproto,
};

const char descriptor_table_protodef_test_2eproto[] =
  "\n\ntest.proto\022\ttestProto\"\035\n\017ProviderReque"
  "st\022\n\n\002Np\030\001 \001(\t\"@\n\rProviderReply\022\n\n\002Np\030\001 "
  "\001(\t\022\r\n\005certp\030\002 \001(\t\022\024\n\014responseCode\030\003 \001(\005"
  "\"(\n\013TestRequest\022\031\n\021testStringRequest\030\001 \001"
  "(\t\"$\n\tTestReply\022\027\n\017testStringReply\030\001 \001(\t"
  "2\205\001\n\004Test\0228\n\006testMe\022\026.testProto.TestRequ"
  "est\032\024.testProto.TestReply\"\000\022C\n\tgProvider"
  "\022\032.testProto.ProviderRequest\032\030.testProto"
  ".ProviderReply\"\000b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_test_2eproto = {
  false, InitDefaults_test_2eproto, 
  descriptor_table_protodef_test_2eproto,
  "test.proto", &assign_descriptors_table_test_2eproto, 344,
};

void AddDescriptors_test_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_test_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_test_2eproto = []() { AddDescriptors_test_2eproto(); return true; }();
namespace testProto {

// ===================================================================

void ProviderRequest::InitAsDefaultInstance() {
}
class ProviderRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProviderRequest::kNpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProviderRequest::ProviderRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:testProto.ProviderRequest)
}
ProviderRequest::ProviderRequest(const ProviderRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  np_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.np().size() > 0) {
    np_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.np_);
  }
  // @@protoc_insertion_point(copy_constructor:testProto.ProviderRequest)
}

void ProviderRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ProviderRequest_test_2eproto.base);
  np_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ProviderRequest::~ProviderRequest() {
  // @@protoc_insertion_point(destructor:testProto.ProviderRequest)
  SharedDtor();
}

void ProviderRequest::SharedDtor() {
  np_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ProviderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProviderRequest& ProviderRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ProviderRequest_test_2eproto.base);
  return *internal_default_instance();
}


void ProviderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:testProto.ProviderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  np_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProviderRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ProviderRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string Np = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("testProto.ProviderRequest.Np");
        object = msg->mutable_np();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProviderRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:testProto.ProviderRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string Np = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_np()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->np().data(), static_cast<int>(this->np().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "testProto.ProviderRequest.Np"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:testProto.ProviderRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:testProto.ProviderRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProviderRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:testProto.ProviderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Np = 1;
  if (this->np().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->np().data(), static_cast<int>(this->np().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "testProto.ProviderRequest.Np");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->np(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:testProto.ProviderRequest)
}

::google::protobuf::uint8* ProviderRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:testProto.ProviderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Np = 1;
  if (this->np().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->np().data(), static_cast<int>(this->np().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "testProto.ProviderRequest.Np");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->np(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testProto.ProviderRequest)
  return target;
}

size_t ProviderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testProto.ProviderRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Np = 1;
  if (this->np().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->np());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProviderRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:testProto.ProviderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ProviderRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ProviderRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:testProto.ProviderRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:testProto.ProviderRequest)
    MergeFrom(*source);
  }
}

void ProviderRequest::MergeFrom(const ProviderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:testProto.ProviderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.np().size() > 0) {

    np_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.np_);
  }
}

void ProviderRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:testProto.ProviderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProviderRequest::CopyFrom(const ProviderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testProto.ProviderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProviderRequest::IsInitialized() const {
  return true;
}

void ProviderRequest::Swap(ProviderRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProviderRequest::InternalSwap(ProviderRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  np_.Swap(&other->np_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata ProviderRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_test_2eproto);
  return ::file_level_metadata_test_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ProviderReply::InitAsDefaultInstance() {
}
class ProviderReply::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProviderReply::kNpFieldNumber;
const int ProviderReply::kCertpFieldNumber;
const int ProviderReply::kResponseCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProviderReply::ProviderReply()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:testProto.ProviderReply)
}
ProviderReply::ProviderReply(const ProviderReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  np_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.np().size() > 0) {
    np_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.np_);
  }
  certp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.certp().size() > 0) {
    certp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.certp_);
  }
  responsecode_ = from.responsecode_;
  // @@protoc_insertion_point(copy_constructor:testProto.ProviderReply)
}

void ProviderReply::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ProviderReply_test_2eproto.base);
  np_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  certp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  responsecode_ = 0;
}

ProviderReply::~ProviderReply() {
  // @@protoc_insertion_point(destructor:testProto.ProviderReply)
  SharedDtor();
}

void ProviderReply::SharedDtor() {
  np_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  certp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ProviderReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProviderReply& ProviderReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ProviderReply_test_2eproto.base);
  return *internal_default_instance();
}


void ProviderReply::Clear() {
// @@protoc_insertion_point(message_clear_start:testProto.ProviderReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  np_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  certp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  responsecode_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProviderReply::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ProviderReply*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string Np = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("testProto.ProviderReply.Np");
        object = msg->mutable_np();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string certp = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("testProto.ProviderReply.certp");
        object = msg->mutable_certp();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 responseCode = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_responsecode(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProviderReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:testProto.ProviderReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string Np = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_np()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->np().data(), static_cast<int>(this->np().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "testProto.ProviderReply.Np"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string certp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_certp()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->certp().data(), static_cast<int>(this->certp().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "testProto.ProviderReply.certp"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 responseCode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &responsecode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:testProto.ProviderReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:testProto.ProviderReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProviderReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:testProto.ProviderReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Np = 1;
  if (this->np().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->np().data(), static_cast<int>(this->np().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "testProto.ProviderReply.Np");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->np(), output);
  }

  // string certp = 2;
  if (this->certp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->certp().data(), static_cast<int>(this->certp().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "testProto.ProviderReply.certp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->certp(), output);
  }

  // int32 responseCode = 3;
  if (this->responsecode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->responsecode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:testProto.ProviderReply)
}

::google::protobuf::uint8* ProviderReply::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:testProto.ProviderReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Np = 1;
  if (this->np().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->np().data(), static_cast<int>(this->np().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "testProto.ProviderReply.Np");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->np(), target);
  }

  // string certp = 2;
  if (this->certp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->certp().data(), static_cast<int>(this->certp().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "testProto.ProviderReply.certp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->certp(), target);
  }

  // int32 responseCode = 3;
  if (this->responsecode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->responsecode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testProto.ProviderReply)
  return target;
}

size_t ProviderReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testProto.ProviderReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Np = 1;
  if (this->np().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->np());
  }

  // string certp = 2;
  if (this->certp().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->certp());
  }

  // int32 responseCode = 3;
  if (this->responsecode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->responsecode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProviderReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:testProto.ProviderReply)
  GOOGLE_DCHECK_NE(&from, this);
  const ProviderReply* source =
      ::google::protobuf::DynamicCastToGenerated<ProviderReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:testProto.ProviderReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:testProto.ProviderReply)
    MergeFrom(*source);
  }
}

void ProviderReply::MergeFrom(const ProviderReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:testProto.ProviderReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.np().size() > 0) {

    np_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.np_);
  }
  if (from.certp().size() > 0) {

    certp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.certp_);
  }
  if (from.responsecode() != 0) {
    set_responsecode(from.responsecode());
  }
}

void ProviderReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:testProto.ProviderReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProviderReply::CopyFrom(const ProviderReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testProto.ProviderReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProviderReply::IsInitialized() const {
  return true;
}

void ProviderReply::Swap(ProviderReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProviderReply::InternalSwap(ProviderReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  np_.Swap(&other->np_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  certp_.Swap(&other->certp_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(responsecode_, other->responsecode_);
}

::google::protobuf::Metadata ProviderReply::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_test_2eproto);
  return ::file_level_metadata_test_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TestRequest::InitAsDefaultInstance() {
}
class TestRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestRequest::kTestStringRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestRequest::TestRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:testProto.TestRequest)
}
TestRequest::TestRequest(const TestRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  teststringrequest_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.teststringrequest().size() > 0) {
    teststringrequest_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.teststringrequest_);
  }
  // @@protoc_insertion_point(copy_constructor:testProto.TestRequest)
}

void TestRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TestRequest_test_2eproto.base);
  teststringrequest_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TestRequest::~TestRequest() {
  // @@protoc_insertion_point(destructor:testProto.TestRequest)
  SharedDtor();
}

void TestRequest::SharedDtor() {
  teststringrequest_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TestRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestRequest& TestRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TestRequest_test_2eproto.base);
  return *internal_default_instance();
}


void TestRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:testProto.TestRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  teststringrequest_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TestRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TestRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string testStringRequest = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("testProto.TestRequest.testStringRequest");
        object = msg->mutable_teststringrequest();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TestRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:testProto.TestRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string testStringRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_teststringrequest()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->teststringrequest().data(), static_cast<int>(this->teststringrequest().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "testProto.TestRequest.testStringRequest"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:testProto.TestRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:testProto.TestRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TestRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:testProto.TestRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string testStringRequest = 1;
  if (this->teststringrequest().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->teststringrequest().data(), static_cast<int>(this->teststringrequest().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "testProto.TestRequest.testStringRequest");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->teststringrequest(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:testProto.TestRequest)
}

::google::protobuf::uint8* TestRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:testProto.TestRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string testStringRequest = 1;
  if (this->teststringrequest().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->teststringrequest().data(), static_cast<int>(this->teststringrequest().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "testProto.TestRequest.testStringRequest");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->teststringrequest(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testProto.TestRequest)
  return target;
}

size_t TestRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testProto.TestRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string testStringRequest = 1;
  if (this->teststringrequest().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->teststringrequest());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:testProto.TestRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TestRequest* source =
      ::google::protobuf::DynamicCastToGenerated<TestRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:testProto.TestRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:testProto.TestRequest)
    MergeFrom(*source);
  }
}

void TestRequest::MergeFrom(const TestRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:testProto.TestRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.teststringrequest().size() > 0) {

    teststringrequest_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.teststringrequest_);
  }
}

void TestRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:testProto.TestRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestRequest::CopyFrom(const TestRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testProto.TestRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestRequest::IsInitialized() const {
  return true;
}

void TestRequest::Swap(TestRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestRequest::InternalSwap(TestRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  teststringrequest_.Swap(&other->teststringrequest_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata TestRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_test_2eproto);
  return ::file_level_metadata_test_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TestReply::InitAsDefaultInstance() {
}
class TestReply::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestReply::kTestStringReplyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestReply::TestReply()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:testProto.TestReply)
}
TestReply::TestReply(const TestReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  teststringreply_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.teststringreply().size() > 0) {
    teststringreply_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.teststringreply_);
  }
  // @@protoc_insertion_point(copy_constructor:testProto.TestReply)
}

void TestReply::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TestReply_test_2eproto.base);
  teststringreply_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TestReply::~TestReply() {
  // @@protoc_insertion_point(destructor:testProto.TestReply)
  SharedDtor();
}

void TestReply::SharedDtor() {
  teststringreply_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TestReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestReply& TestReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TestReply_test_2eproto.base);
  return *internal_default_instance();
}


void TestReply::Clear() {
// @@protoc_insertion_point(message_clear_start:testProto.TestReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  teststringreply_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TestReply::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TestReply*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string testStringReply = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("testProto.TestReply.testStringReply");
        object = msg->mutable_teststringreply();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TestReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:testProto.TestReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string testStringReply = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_teststringreply()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->teststringreply().data(), static_cast<int>(this->teststringreply().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "testProto.TestReply.testStringReply"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:testProto.TestReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:testProto.TestReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TestReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:testProto.TestReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string testStringReply = 1;
  if (this->teststringreply().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->teststringreply().data(), static_cast<int>(this->teststringreply().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "testProto.TestReply.testStringReply");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->teststringreply(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:testProto.TestReply)
}

::google::protobuf::uint8* TestReply::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:testProto.TestReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string testStringReply = 1;
  if (this->teststringreply().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->teststringreply().data(), static_cast<int>(this->teststringreply().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "testProto.TestReply.testStringReply");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->teststringreply(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testProto.TestReply)
  return target;
}

size_t TestReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testProto.TestReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string testStringReply = 1;
  if (this->teststringreply().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->teststringreply());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:testProto.TestReply)
  GOOGLE_DCHECK_NE(&from, this);
  const TestReply* source =
      ::google::protobuf::DynamicCastToGenerated<TestReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:testProto.TestReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:testProto.TestReply)
    MergeFrom(*source);
  }
}

void TestReply::MergeFrom(const TestReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:testProto.TestReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.teststringreply().size() > 0) {

    teststringreply_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.teststringreply_);
  }
}

void TestReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:testProto.TestReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestReply::CopyFrom(const TestReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testProto.TestReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestReply::IsInitialized() const {
  return true;
}

void TestReply::Swap(TestReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestReply::InternalSwap(TestReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  teststringreply_.Swap(&other->teststringreply_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata TestReply::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_test_2eproto);
  return ::file_level_metadata_test_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace testProto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::testProto::ProviderRequest* Arena::CreateMaybeMessage< ::testProto::ProviderRequest >(Arena* arena) {
  return Arena::CreateInternal< ::testProto::ProviderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::testProto::ProviderReply* Arena::CreateMaybeMessage< ::testProto::ProviderReply >(Arena* arena) {
  return Arena::CreateInternal< ::testProto::ProviderReply >(arena);
}
template<> PROTOBUF_NOINLINE ::testProto::TestRequest* Arena::CreateMaybeMessage< ::testProto::TestRequest >(Arena* arena) {
  return Arena::CreateInternal< ::testProto::TestRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::testProto::TestReply* Arena::CreateMaybeMessage< ::testProto::TestReply >(Arena* arena) {
  return Arena::CreateInternal< ::testProto::TestReply >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
