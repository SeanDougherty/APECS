// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef PROTOBUF_INCLUDED_test_2eproto
#define PROTOBUF_INCLUDED_test_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_test_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_test_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_test_2eproto();
namespace testProto {
class ProviderReply;
class ProviderReplyDefaultTypeInternal;
extern ProviderReplyDefaultTypeInternal _ProviderReply_default_instance_;
class ProviderRequest;
class ProviderRequestDefaultTypeInternal;
extern ProviderRequestDefaultTypeInternal _ProviderRequest_default_instance_;
class TestReply;
class TestReplyDefaultTypeInternal;
extern TestReplyDefaultTypeInternal _TestReply_default_instance_;
class TestRequest;
class TestRequestDefaultTypeInternal;
extern TestRequestDefaultTypeInternal _TestRequest_default_instance_;
}  // namespace testProto
namespace google {
namespace protobuf {
template<> ::testProto::ProviderReply* Arena::CreateMaybeMessage<::testProto::ProviderReply>(Arena*);
template<> ::testProto::ProviderRequest* Arena::CreateMaybeMessage<::testProto::ProviderRequest>(Arena*);
template<> ::testProto::TestReply* Arena::CreateMaybeMessage<::testProto::TestReply>(Arena*);
template<> ::testProto::TestRequest* Arena::CreateMaybeMessage<::testProto::TestRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace testProto {

// ===================================================================

class ProviderRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:testProto.ProviderRequest) */ {
 public:
  ProviderRequest();
  virtual ~ProviderRequest();

  ProviderRequest(const ProviderRequest& from);

  inline ProviderRequest& operator=(const ProviderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProviderRequest(ProviderRequest&& from) noexcept
    : ProviderRequest() {
    *this = ::std::move(from);
  }

  inline ProviderRequest& operator=(ProviderRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ProviderRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProviderRequest* internal_default_instance() {
    return reinterpret_cast<const ProviderRequest*>(
               &_ProviderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ProviderRequest* other);
  friend void swap(ProviderRequest& a, ProviderRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProviderRequest* New() const final {
    return CreateMaybeMessage<ProviderRequest>(nullptr);
  }

  ProviderRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProviderRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProviderRequest& from);
  void MergeFrom(const ProviderRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProviderRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Np = 1;
  void clear_np();
  static const int kNpFieldNumber = 1;
  const ::std::string& np() const;
  void set_np(const ::std::string& value);
  #if LANG_CXX11
  void set_np(::std::string&& value);
  #endif
  void set_np(const char* value);
  void set_np(const char* value, size_t size);
  ::std::string* mutable_np();
  ::std::string* release_np();
  void set_allocated_np(::std::string* np);

  // @@protoc_insertion_point(class_scope:testProto.ProviderRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr np_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class ProviderReply final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:testProto.ProviderReply) */ {
 public:
  ProviderReply();
  virtual ~ProviderReply();

  ProviderReply(const ProviderReply& from);

  inline ProviderReply& operator=(const ProviderReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProviderReply(ProviderReply&& from) noexcept
    : ProviderReply() {
    *this = ::std::move(from);
  }

  inline ProviderReply& operator=(ProviderReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ProviderReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProviderReply* internal_default_instance() {
    return reinterpret_cast<const ProviderReply*>(
               &_ProviderReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ProviderReply* other);
  friend void swap(ProviderReply& a, ProviderReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProviderReply* New() const final {
    return CreateMaybeMessage<ProviderReply>(nullptr);
  }

  ProviderReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProviderReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProviderReply& from);
  void MergeFrom(const ProviderReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProviderReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Np = 1;
  void clear_np();
  static const int kNpFieldNumber = 1;
  const ::std::string& np() const;
  void set_np(const ::std::string& value);
  #if LANG_CXX11
  void set_np(::std::string&& value);
  #endif
  void set_np(const char* value);
  void set_np(const char* value, size_t size);
  ::std::string* mutable_np();
  ::std::string* release_np();
  void set_allocated_np(::std::string* np);

  // string certp = 2;
  void clear_certp();
  static const int kCertpFieldNumber = 2;
  const ::std::string& certp() const;
  void set_certp(const ::std::string& value);
  #if LANG_CXX11
  void set_certp(::std::string&& value);
  #endif
  void set_certp(const char* value);
  void set_certp(const char* value, size_t size);
  ::std::string* mutable_certp();
  ::std::string* release_certp();
  void set_allocated_certp(::std::string* certp);

  // int32 responseCode = 3;
  void clear_responsecode();
  static const int kResponseCodeFieldNumber = 3;
  ::google::protobuf::int32 responsecode() const;
  void set_responsecode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:testProto.ProviderReply)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr np_;
  ::google::protobuf::internal::ArenaStringPtr certp_;
  ::google::protobuf::int32 responsecode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class TestRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:testProto.TestRequest) */ {
 public:
  TestRequest();
  virtual ~TestRequest();

  TestRequest(const TestRequest& from);

  inline TestRequest& operator=(const TestRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TestRequest(TestRequest&& from) noexcept
    : TestRequest() {
    *this = ::std::move(from);
  }

  inline TestRequest& operator=(TestRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TestRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestRequest* internal_default_instance() {
    return reinterpret_cast<const TestRequest*>(
               &_TestRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(TestRequest* other);
  friend void swap(TestRequest& a, TestRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TestRequest* New() const final {
    return CreateMaybeMessage<TestRequest>(nullptr);
  }

  TestRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TestRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TestRequest& from);
  void MergeFrom(const TestRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string testStringRequest = 1;
  void clear_teststringrequest();
  static const int kTestStringRequestFieldNumber = 1;
  const ::std::string& teststringrequest() const;
  void set_teststringrequest(const ::std::string& value);
  #if LANG_CXX11
  void set_teststringrequest(::std::string&& value);
  #endif
  void set_teststringrequest(const char* value);
  void set_teststringrequest(const char* value, size_t size);
  ::std::string* mutable_teststringrequest();
  ::std::string* release_teststringrequest();
  void set_allocated_teststringrequest(::std::string* teststringrequest);

  // @@protoc_insertion_point(class_scope:testProto.TestRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr teststringrequest_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class TestReply final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:testProto.TestReply) */ {
 public:
  TestReply();
  virtual ~TestReply();

  TestReply(const TestReply& from);

  inline TestReply& operator=(const TestReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TestReply(TestReply&& from) noexcept
    : TestReply() {
    *this = ::std::move(from);
  }

  inline TestReply& operator=(TestReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TestReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestReply* internal_default_instance() {
    return reinterpret_cast<const TestReply*>(
               &_TestReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(TestReply* other);
  friend void swap(TestReply& a, TestReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TestReply* New() const final {
    return CreateMaybeMessage<TestReply>(nullptr);
  }

  TestReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TestReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TestReply& from);
  void MergeFrom(const TestReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string testStringReply = 1;
  void clear_teststringreply();
  static const int kTestStringReplyFieldNumber = 1;
  const ::std::string& teststringreply() const;
  void set_teststringreply(const ::std::string& value);
  #if LANG_CXX11
  void set_teststringreply(::std::string&& value);
  #endif
  void set_teststringreply(const char* value);
  void set_teststringreply(const char* value, size_t size);
  ::std::string* mutable_teststringreply();
  ::std::string* release_teststringreply();
  void set_allocated_teststringreply(::std::string* teststringreply);

  // @@protoc_insertion_point(class_scope:testProto.TestReply)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr teststringreply_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProviderRequest

// string Np = 1;
inline void ProviderRequest::clear_np() {
  np_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProviderRequest::np() const {
  // @@protoc_insertion_point(field_get:testProto.ProviderRequest.Np)
  return np_.GetNoArena();
}
inline void ProviderRequest::set_np(const ::std::string& value) {
  
  np_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:testProto.ProviderRequest.Np)
}
#if LANG_CXX11
inline void ProviderRequest::set_np(::std::string&& value) {
  
  np_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:testProto.ProviderRequest.Np)
}
#endif
inline void ProviderRequest::set_np(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  np_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:testProto.ProviderRequest.Np)
}
inline void ProviderRequest::set_np(const char* value, size_t size) {
  
  np_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:testProto.ProviderRequest.Np)
}
inline ::std::string* ProviderRequest::mutable_np() {
  
  // @@protoc_insertion_point(field_mutable:testProto.ProviderRequest.Np)
  return np_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProviderRequest::release_np() {
  // @@protoc_insertion_point(field_release:testProto.ProviderRequest.Np)
  
  return np_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProviderRequest::set_allocated_np(::std::string* np) {
  if (np != nullptr) {
    
  } else {
    
  }
  np_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), np);
  // @@protoc_insertion_point(field_set_allocated:testProto.ProviderRequest.Np)
}

// -------------------------------------------------------------------

// ProviderReply

// string Np = 1;
inline void ProviderReply::clear_np() {
  np_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProviderReply::np() const {
  // @@protoc_insertion_point(field_get:testProto.ProviderReply.Np)
  return np_.GetNoArena();
}
inline void ProviderReply::set_np(const ::std::string& value) {
  
  np_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:testProto.ProviderReply.Np)
}
#if LANG_CXX11
inline void ProviderReply::set_np(::std::string&& value) {
  
  np_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:testProto.ProviderReply.Np)
}
#endif
inline void ProviderReply::set_np(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  np_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:testProto.ProviderReply.Np)
}
inline void ProviderReply::set_np(const char* value, size_t size) {
  
  np_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:testProto.ProviderReply.Np)
}
inline ::std::string* ProviderReply::mutable_np() {
  
  // @@protoc_insertion_point(field_mutable:testProto.ProviderReply.Np)
  return np_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProviderReply::release_np() {
  // @@protoc_insertion_point(field_release:testProto.ProviderReply.Np)
  
  return np_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProviderReply::set_allocated_np(::std::string* np) {
  if (np != nullptr) {
    
  } else {
    
  }
  np_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), np);
  // @@protoc_insertion_point(field_set_allocated:testProto.ProviderReply.Np)
}

// string certp = 2;
inline void ProviderReply::clear_certp() {
  certp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProviderReply::certp() const {
  // @@protoc_insertion_point(field_get:testProto.ProviderReply.certp)
  return certp_.GetNoArena();
}
inline void ProviderReply::set_certp(const ::std::string& value) {
  
  certp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:testProto.ProviderReply.certp)
}
#if LANG_CXX11
inline void ProviderReply::set_certp(::std::string&& value) {
  
  certp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:testProto.ProviderReply.certp)
}
#endif
inline void ProviderReply::set_certp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  certp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:testProto.ProviderReply.certp)
}
inline void ProviderReply::set_certp(const char* value, size_t size) {
  
  certp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:testProto.ProviderReply.certp)
}
inline ::std::string* ProviderReply::mutable_certp() {
  
  // @@protoc_insertion_point(field_mutable:testProto.ProviderReply.certp)
  return certp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProviderReply::release_certp() {
  // @@protoc_insertion_point(field_release:testProto.ProviderReply.certp)
  
  return certp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProviderReply::set_allocated_certp(::std::string* certp) {
  if (certp != nullptr) {
    
  } else {
    
  }
  certp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), certp);
  // @@protoc_insertion_point(field_set_allocated:testProto.ProviderReply.certp)
}

// int32 responseCode = 3;
inline void ProviderReply::clear_responsecode() {
  responsecode_ = 0;
}
inline ::google::protobuf::int32 ProviderReply::responsecode() const {
  // @@protoc_insertion_point(field_get:testProto.ProviderReply.responseCode)
  return responsecode_;
}
inline void ProviderReply::set_responsecode(::google::protobuf::int32 value) {
  
  responsecode_ = value;
  // @@protoc_insertion_point(field_set:testProto.ProviderReply.responseCode)
}

// -------------------------------------------------------------------

// TestRequest

// string testStringRequest = 1;
inline void TestRequest::clear_teststringrequest() {
  teststringrequest_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestRequest::teststringrequest() const {
  // @@protoc_insertion_point(field_get:testProto.TestRequest.testStringRequest)
  return teststringrequest_.GetNoArena();
}
inline void TestRequest::set_teststringrequest(const ::std::string& value) {
  
  teststringrequest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:testProto.TestRequest.testStringRequest)
}
#if LANG_CXX11
inline void TestRequest::set_teststringrequest(::std::string&& value) {
  
  teststringrequest_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:testProto.TestRequest.testStringRequest)
}
#endif
inline void TestRequest::set_teststringrequest(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  teststringrequest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:testProto.TestRequest.testStringRequest)
}
inline void TestRequest::set_teststringrequest(const char* value, size_t size) {
  
  teststringrequest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:testProto.TestRequest.testStringRequest)
}
inline ::std::string* TestRequest::mutable_teststringrequest() {
  
  // @@protoc_insertion_point(field_mutable:testProto.TestRequest.testStringRequest)
  return teststringrequest_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestRequest::release_teststringrequest() {
  // @@protoc_insertion_point(field_release:testProto.TestRequest.testStringRequest)
  
  return teststringrequest_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestRequest::set_allocated_teststringrequest(::std::string* teststringrequest) {
  if (teststringrequest != nullptr) {
    
  } else {
    
  }
  teststringrequest_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), teststringrequest);
  // @@protoc_insertion_point(field_set_allocated:testProto.TestRequest.testStringRequest)
}

// -------------------------------------------------------------------

// TestReply

// string testStringReply = 1;
inline void TestReply::clear_teststringreply() {
  teststringreply_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestReply::teststringreply() const {
  // @@protoc_insertion_point(field_get:testProto.TestReply.testStringReply)
  return teststringreply_.GetNoArena();
}
inline void TestReply::set_teststringreply(const ::std::string& value) {
  
  teststringreply_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:testProto.TestReply.testStringReply)
}
#if LANG_CXX11
inline void TestReply::set_teststringreply(::std::string&& value) {
  
  teststringreply_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:testProto.TestReply.testStringReply)
}
#endif
inline void TestReply::set_teststringreply(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  teststringreply_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:testProto.TestReply.testStringReply)
}
inline void TestReply::set_teststringreply(const char* value, size_t size) {
  
  teststringreply_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:testProto.TestReply.testStringReply)
}
inline ::std::string* TestReply::mutable_teststringreply() {
  
  // @@protoc_insertion_point(field_mutable:testProto.TestReply.testStringReply)
  return teststringreply_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestReply::release_teststringreply() {
  // @@protoc_insertion_point(field_release:testProto.TestReply.testStringReply)
  
  return teststringreply_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestReply::set_allocated_teststringreply(::std::string* teststringreply) {
  if (teststringreply != nullptr) {
    
  } else {
    
  }
  teststringreply_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), teststringreply);
  // @@protoc_insertion_point(field_set_allocated:testProto.TestReply.testStringReply)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace testProto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_test_2eproto
