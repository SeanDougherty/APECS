// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: provider.proto

#ifndef PROTOBUF_INCLUDED_provider_2eproto
#define PROTOBUF_INCLUDED_provider_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_provider_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_provider_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_provider_2eproto();
namespace providerProto {
class NewToken;
class NewTokenDefaultTypeInternal;
extern NewTokenDefaultTypeInternal _NewToken_default_instance_;
class ProviderDataPayload;
class ProviderDataPayloadDefaultTypeInternal;
extern ProviderDataPayloadDefaultTypeInternal _ProviderDataPayload_default_instance_;
class ProviderDataRequest;
class ProviderDataRequestDefaultTypeInternal;
extern ProviderDataRequestDefaultTypeInternal _ProviderDataRequest_default_instance_;
class RevocRequest;
class RevocRequestDefaultTypeInternal;
extern RevocRequestDefaultTypeInternal _RevocRequest_default_instance_;
class RevocResponse;
class RevocResponseDefaultTypeInternal;
extern RevocResponseDefaultTypeInternal _RevocResponse_default_instance_;
class UserCredentials;
class UserCredentialsDefaultTypeInternal;
extern UserCredentialsDefaultTypeInternal _UserCredentials_default_instance_;
class UserData;
class UserDataDefaultTypeInternal;
extern UserDataDefaultTypeInternal _UserData_default_instance_;
class UserTokenAndSymKey;
class UserTokenAndSymKeyDefaultTypeInternal;
extern UserTokenAndSymKeyDefaultTypeInternal _UserTokenAndSymKey_default_instance_;
}  // namespace providerProto
namespace google {
namespace protobuf {
template<> ::providerProto::NewToken* Arena::CreateMaybeMessage<::providerProto::NewToken>(Arena*);
template<> ::providerProto::ProviderDataPayload* Arena::CreateMaybeMessage<::providerProto::ProviderDataPayload>(Arena*);
template<> ::providerProto::ProviderDataRequest* Arena::CreateMaybeMessage<::providerProto::ProviderDataRequest>(Arena*);
template<> ::providerProto::RevocRequest* Arena::CreateMaybeMessage<::providerProto::RevocRequest>(Arena*);
template<> ::providerProto::RevocResponse* Arena::CreateMaybeMessage<::providerProto::RevocResponse>(Arena*);
template<> ::providerProto::UserCredentials* Arena::CreateMaybeMessage<::providerProto::UserCredentials>(Arena*);
template<> ::providerProto::UserData* Arena::CreateMaybeMessage<::providerProto::UserData>(Arena*);
template<> ::providerProto::UserTokenAndSymKey* Arena::CreateMaybeMessage<::providerProto::UserTokenAndSymKey>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace providerProto {

// ===================================================================

class ProviderDataRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:providerProto.ProviderDataRequest) */ {
 public:
  ProviderDataRequest();
  virtual ~ProviderDataRequest();

  ProviderDataRequest(const ProviderDataRequest& from);

  inline ProviderDataRequest& operator=(const ProviderDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProviderDataRequest(ProviderDataRequest&& from) noexcept
    : ProviderDataRequest() {
    *this = ::std::move(from);
  }

  inline ProviderDataRequest& operator=(ProviderDataRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ProviderDataRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProviderDataRequest* internal_default_instance() {
    return reinterpret_cast<const ProviderDataRequest*>(
               &_ProviderDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ProviderDataRequest* other);
  friend void swap(ProviderDataRequest& a, ProviderDataRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProviderDataRequest* New() const final {
    return CreateMaybeMessage<ProviderDataRequest>(nullptr);
  }

  ProviderDataRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProviderDataRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProviderDataRequest& from);
  void MergeFrom(const ProviderDataRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProviderDataRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string content_name = 1;
  void clear_content_name();
  static const int kContentNameFieldNumber = 1;
  const ::std::string& content_name() const;
  void set_content_name(const ::std::string& value);
  #if LANG_CXX11
  void set_content_name(::std::string&& value);
  #endif
  void set_content_name(const char* value);
  void set_content_name(const char* value, size_t size);
  ::std::string* mutable_content_name();
  ::std::string* release_content_name();
  void set_allocated_content_name(::std::string* content_name);

  // @@protoc_insertion_point(class_scope:providerProto.ProviderDataRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr content_name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_provider_2eproto;
};
// -------------------------------------------------------------------

class ProviderDataPayload final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:providerProto.ProviderDataPayload) */ {
 public:
  ProviderDataPayload();
  virtual ~ProviderDataPayload();

  ProviderDataPayload(const ProviderDataPayload& from);

  inline ProviderDataPayload& operator=(const ProviderDataPayload& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProviderDataPayload(ProviderDataPayload&& from) noexcept
    : ProviderDataPayload() {
    *this = ::std::move(from);
  }

  inline ProviderDataPayload& operator=(ProviderDataPayload&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ProviderDataPayload& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProviderDataPayload* internal_default_instance() {
    return reinterpret_cast<const ProviderDataPayload*>(
               &_ProviderDataPayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ProviderDataPayload* other);
  friend void swap(ProviderDataPayload& a, ProviderDataPayload& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProviderDataPayload* New() const final {
    return CreateMaybeMessage<ProviderDataPayload>(nullptr);
  }

  ProviderDataPayload* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProviderDataPayload>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProviderDataPayload& from);
  void MergeFrom(const ProviderDataPayload& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProviderDataPayload* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string data = 1;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // string msg = 3;
  void clear_msg();
  static const int kMsgFieldNumber = 3;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // int32 access_level = 2;
  void clear_access_level();
  static const int kAccessLevelFieldNumber = 2;
  ::google::protobuf::int32 access_level() const;
  void set_access_level(::google::protobuf::int32 value);

  // int32 response_code = 4;
  void clear_response_code();
  static const int kResponseCodeFieldNumber = 4;
  ::google::protobuf::int32 response_code() const;
  void set_response_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:providerProto.ProviderDataPayload)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::int32 access_level_;
  ::google::protobuf::int32 response_code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_provider_2eproto;
};
// -------------------------------------------------------------------

class UserData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:providerProto.UserData) */ {
 public:
  UserData();
  virtual ~UserData();

  UserData(const UserData& from);

  inline UserData& operator=(const UserData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData(UserData&& from) noexcept
    : UserData() {
    *this = ::std::move(from);
  }

  inline UserData& operator=(UserData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UserData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserData* internal_default_instance() {
    return reinterpret_cast<const UserData*>(
               &_UserData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(UserData* other);
  friend void swap(UserData& a, UserData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData* New() const final {
    return CreateMaybeMessage<UserData>(nullptr);
  }

  UserData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserData& from);
  void MergeFrom(const UserData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // string optional_data = 4;
  void clear_optional_data();
  static const int kOptionalDataFieldNumber = 4;
  const ::std::string& optional_data() const;
  void set_optional_data(const ::std::string& value);
  #if LANG_CXX11
  void set_optional_data(::std::string&& value);
  #endif
  void set_optional_data(const char* value);
  void set_optional_data(const char* value, size_t size);
  ::std::string* mutable_optional_data();
  ::std::string* release_optional_data();
  void set_allocated_optional_data(::std::string* optional_data);

  // string certu = 5;
  void clear_certu();
  static const int kCertuFieldNumber = 5;
  const ::std::string& certu() const;
  void set_certu(const ::std::string& value);
  #if LANG_CXX11
  void set_certu(::std::string&& value);
  #endif
  void set_certu(const char* value);
  void set_certu(const char* value, size_t size);
  ::std::string* mutable_certu();
  ::std::string* release_certu();
  void set_allocated_certu(::std::string* certu);

  // int32 access_level = 3;
  void clear_access_level();
  static const int kAccessLevelFieldNumber = 3;
  ::google::protobuf::int32 access_level() const;
  void set_access_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:providerProto.UserData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr optional_data_;
  ::google::protobuf::internal::ArenaStringPtr certu_;
  ::google::protobuf::int32 access_level_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_provider_2eproto;
};
// -------------------------------------------------------------------

class UserTokenAndSymKey final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:providerProto.UserTokenAndSymKey) */ {
 public:
  UserTokenAndSymKey();
  virtual ~UserTokenAndSymKey();

  UserTokenAndSymKey(const UserTokenAndSymKey& from);

  inline UserTokenAndSymKey& operator=(const UserTokenAndSymKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserTokenAndSymKey(UserTokenAndSymKey&& from) noexcept
    : UserTokenAndSymKey() {
    *this = ::std::move(from);
  }

  inline UserTokenAndSymKey& operator=(UserTokenAndSymKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UserTokenAndSymKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserTokenAndSymKey* internal_default_instance() {
    return reinterpret_cast<const UserTokenAndSymKey*>(
               &_UserTokenAndSymKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(UserTokenAndSymKey* other);
  friend void swap(UserTokenAndSymKey& a, UserTokenAndSymKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserTokenAndSymKey* New() const final {
    return CreateMaybeMessage<UserTokenAndSymKey>(nullptr);
  }

  UserTokenAndSymKey* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserTokenAndSymKey>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserTokenAndSymKey& from);
  void MergeFrom(const UserTokenAndSymKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserTokenAndSymKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // string symkey = 2;
  void clear_symkey();
  static const int kSymkeyFieldNumber = 2;
  const ::std::string& symkey() const;
  void set_symkey(const ::std::string& value);
  #if LANG_CXX11
  void set_symkey(::std::string&& value);
  #endif
  void set_symkey(const char* value);
  void set_symkey(const char* value, size_t size);
  ::std::string* mutable_symkey();
  ::std::string* release_symkey();
  void set_allocated_symkey(::std::string* symkey);

  // int32 symkey_length = 3;
  void clear_symkey_length();
  static const int kSymkeyLengthFieldNumber = 3;
  ::google::protobuf::int32 symkey_length() const;
  void set_symkey_length(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:providerProto.UserTokenAndSymKey)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::internal::ArenaStringPtr symkey_;
  ::google::protobuf::int32 symkey_length_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_provider_2eproto;
};
// -------------------------------------------------------------------

class RevocRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:providerProto.RevocRequest) */ {
 public:
  RevocRequest();
  virtual ~RevocRequest();

  RevocRequest(const RevocRequest& from);

  inline RevocRequest& operator=(const RevocRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RevocRequest(RevocRequest&& from) noexcept
    : RevocRequest() {
    *this = ::std::move(from);
  }

  inline RevocRequest& operator=(RevocRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RevocRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RevocRequest* internal_default_instance() {
    return reinterpret_cast<const RevocRequest*>(
               &_RevocRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(RevocRequest* other);
  friend void swap(RevocRequest& a, RevocRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RevocRequest* New() const final {
    return CreateMaybeMessage<RevocRequest>(nullptr);
  }

  RevocRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RevocRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RevocRequest& from);
  void MergeFrom(const RevocRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RevocRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string revoc_request = 1;
  void clear_revoc_request();
  static const int kRevocRequestFieldNumber = 1;
  const ::std::string& revoc_request() const;
  void set_revoc_request(const ::std::string& value);
  #if LANG_CXX11
  void set_revoc_request(::std::string&& value);
  #endif
  void set_revoc_request(const char* value);
  void set_revoc_request(const char* value, size_t size);
  ::std::string* mutable_revoc_request();
  ::std::string* release_revoc_request();
  void set_allocated_revoc_request(::std::string* revoc_request);

  // string request_signature = 2;
  void clear_request_signature();
  static const int kRequestSignatureFieldNumber = 2;
  const ::std::string& request_signature() const;
  void set_request_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_request_signature(::std::string&& value);
  #endif
  void set_request_signature(const char* value);
  void set_request_signature(const char* value, size_t size);
  ::std::string* mutable_request_signature();
  ::std::string* release_request_signature();
  void set_allocated_request_signature(::std::string* request_signature);

  // string user_token = 3;
  void clear_user_token();
  static const int kUserTokenFieldNumber = 3;
  const ::std::string& user_token() const;
  void set_user_token(const ::std::string& value);
  #if LANG_CXX11
  void set_user_token(::std::string&& value);
  #endif
  void set_user_token(const char* value);
  void set_user_token(const char* value, size_t size);
  ::std::string* mutable_user_token();
  ::std::string* release_user_token();
  void set_allocated_user_token(::std::string* user_token);

  // @@protoc_insertion_point(class_scope:providerProto.RevocRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr revoc_request_;
  ::google::protobuf::internal::ArenaStringPtr request_signature_;
  ::google::protobuf::internal::ArenaStringPtr user_token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_provider_2eproto;
};
// -------------------------------------------------------------------

class RevocResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:providerProto.RevocResponse) */ {
 public:
  RevocResponse();
  virtual ~RevocResponse();

  RevocResponse(const RevocResponse& from);

  inline RevocResponse& operator=(const RevocResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RevocResponse(RevocResponse&& from) noexcept
    : RevocResponse() {
    *this = ::std::move(from);
  }

  inline RevocResponse& operator=(RevocResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RevocResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RevocResponse* internal_default_instance() {
    return reinterpret_cast<const RevocResponse*>(
               &_RevocResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(RevocResponse* other);
  friend void swap(RevocResponse& a, RevocResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RevocResponse* New() const final {
    return CreateMaybeMessage<RevocResponse>(nullptr);
  }

  RevocResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RevocResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RevocResponse& from);
  void MergeFrom(const RevocResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RevocResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 1;
  void clear_msg();
  static const int kMsgFieldNumber = 1;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // int32 response_code = 2;
  void clear_response_code();
  static const int kResponseCodeFieldNumber = 2;
  ::google::protobuf::int32 response_code() const;
  void set_response_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:providerProto.RevocResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::int32 response_code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_provider_2eproto;
};
// -------------------------------------------------------------------

class UserCredentials final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:providerProto.UserCredentials) */ {
 public:
  UserCredentials();
  virtual ~UserCredentials();

  UserCredentials(const UserCredentials& from);

  inline UserCredentials& operator=(const UserCredentials& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserCredentials(UserCredentials&& from) noexcept
    : UserCredentials() {
    *this = ::std::move(from);
  }

  inline UserCredentials& operator=(UserCredentials&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UserCredentials& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserCredentials* internal_default_instance() {
    return reinterpret_cast<const UserCredentials*>(
               &_UserCredentials_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(UserCredentials* other);
  friend void swap(UserCredentials& a, UserCredentials& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserCredentials* New() const final {
    return CreateMaybeMessage<UserCredentials>(nullptr);
  }

  UserCredentials* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserCredentials>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserCredentials& from);
  void MergeFrom(const UserCredentials& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserCredentials* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:providerProto.UserCredentials)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_provider_2eproto;
};
// -------------------------------------------------------------------

class NewToken final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:providerProto.NewToken) */ {
 public:
  NewToken();
  virtual ~NewToken();

  NewToken(const NewToken& from);

  inline NewToken& operator=(const NewToken& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NewToken(NewToken&& from) noexcept
    : NewToken() {
    *this = ::std::move(from);
  }

  inline NewToken& operator=(NewToken&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NewToken& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NewToken* internal_default_instance() {
    return reinterpret_cast<const NewToken*>(
               &_NewToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(NewToken* other);
  friend void swap(NewToken& a, NewToken& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NewToken* New() const final {
    return CreateMaybeMessage<NewToken>(nullptr);
  }

  NewToken* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NewToken>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NewToken& from);
  void MergeFrom(const NewToken& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewToken* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string user_token = 1;
  void clear_user_token();
  static const int kUserTokenFieldNumber = 1;
  const ::std::string& user_token() const;
  void set_user_token(const ::std::string& value);
  #if LANG_CXX11
  void set_user_token(::std::string&& value);
  #endif
  void set_user_token(const char* value);
  void set_user_token(const char* value, size_t size);
  ::std::string* mutable_user_token();
  ::std::string* release_user_token();
  void set_allocated_user_token(::std::string* user_token);

  // @@protoc_insertion_point(class_scope:providerProto.NewToken)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_provider_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProviderDataRequest

// string content_name = 1;
inline void ProviderDataRequest::clear_content_name() {
  content_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProviderDataRequest::content_name() const {
  // @@protoc_insertion_point(field_get:providerProto.ProviderDataRequest.content_name)
  return content_name_.GetNoArena();
}
inline void ProviderDataRequest::set_content_name(const ::std::string& value) {
  
  content_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:providerProto.ProviderDataRequest.content_name)
}
#if LANG_CXX11
inline void ProviderDataRequest::set_content_name(::std::string&& value) {
  
  content_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:providerProto.ProviderDataRequest.content_name)
}
#endif
inline void ProviderDataRequest::set_content_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:providerProto.ProviderDataRequest.content_name)
}
inline void ProviderDataRequest::set_content_name(const char* value, size_t size) {
  
  content_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:providerProto.ProviderDataRequest.content_name)
}
inline ::std::string* ProviderDataRequest::mutable_content_name() {
  
  // @@protoc_insertion_point(field_mutable:providerProto.ProviderDataRequest.content_name)
  return content_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProviderDataRequest::release_content_name() {
  // @@protoc_insertion_point(field_release:providerProto.ProviderDataRequest.content_name)
  
  return content_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProviderDataRequest::set_allocated_content_name(::std::string* content_name) {
  if (content_name != nullptr) {
    
  } else {
    
  }
  content_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content_name);
  // @@protoc_insertion_point(field_set_allocated:providerProto.ProviderDataRequest.content_name)
}

// -------------------------------------------------------------------

// ProviderDataPayload

// string data = 1;
inline void ProviderDataPayload::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProviderDataPayload::data() const {
  // @@protoc_insertion_point(field_get:providerProto.ProviderDataPayload.data)
  return data_.GetNoArena();
}
inline void ProviderDataPayload::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:providerProto.ProviderDataPayload.data)
}
#if LANG_CXX11
inline void ProviderDataPayload::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:providerProto.ProviderDataPayload.data)
}
#endif
inline void ProviderDataPayload::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:providerProto.ProviderDataPayload.data)
}
inline void ProviderDataPayload::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:providerProto.ProviderDataPayload.data)
}
inline ::std::string* ProviderDataPayload::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:providerProto.ProviderDataPayload.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProviderDataPayload::release_data() {
  // @@protoc_insertion_point(field_release:providerProto.ProviderDataPayload.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProviderDataPayload::set_allocated_data(::std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:providerProto.ProviderDataPayload.data)
}

// int32 access_level = 2;
inline void ProviderDataPayload::clear_access_level() {
  access_level_ = 0;
}
inline ::google::protobuf::int32 ProviderDataPayload::access_level() const {
  // @@protoc_insertion_point(field_get:providerProto.ProviderDataPayload.access_level)
  return access_level_;
}
inline void ProviderDataPayload::set_access_level(::google::protobuf::int32 value) {
  
  access_level_ = value;
  // @@protoc_insertion_point(field_set:providerProto.ProviderDataPayload.access_level)
}

// string msg = 3;
inline void ProviderDataPayload::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProviderDataPayload::msg() const {
  // @@protoc_insertion_point(field_get:providerProto.ProviderDataPayload.msg)
  return msg_.GetNoArena();
}
inline void ProviderDataPayload::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:providerProto.ProviderDataPayload.msg)
}
#if LANG_CXX11
inline void ProviderDataPayload::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:providerProto.ProviderDataPayload.msg)
}
#endif
inline void ProviderDataPayload::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:providerProto.ProviderDataPayload.msg)
}
inline void ProviderDataPayload::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:providerProto.ProviderDataPayload.msg)
}
inline ::std::string* ProviderDataPayload::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:providerProto.ProviderDataPayload.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProviderDataPayload::release_msg() {
  // @@protoc_insertion_point(field_release:providerProto.ProviderDataPayload.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProviderDataPayload::set_allocated_msg(::std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:providerProto.ProviderDataPayload.msg)
}

// int32 response_code = 4;
inline void ProviderDataPayload::clear_response_code() {
  response_code_ = 0;
}
inline ::google::protobuf::int32 ProviderDataPayload::response_code() const {
  // @@protoc_insertion_point(field_get:providerProto.ProviderDataPayload.response_code)
  return response_code_;
}
inline void ProviderDataPayload::set_response_code(::google::protobuf::int32 value) {
  
  response_code_ = value;
  // @@protoc_insertion_point(field_set:providerProto.ProviderDataPayload.response_code)
}

// -------------------------------------------------------------------

// UserData

// string username = 1;
inline void UserData::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserData::username() const {
  // @@protoc_insertion_point(field_get:providerProto.UserData.username)
  return username_.GetNoArena();
}
inline void UserData::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:providerProto.UserData.username)
}
#if LANG_CXX11
inline void UserData::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:providerProto.UserData.username)
}
#endif
inline void UserData::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:providerProto.UserData.username)
}
inline void UserData::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:providerProto.UserData.username)
}
inline ::std::string* UserData::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:providerProto.UserData.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserData::release_username() {
  // @@protoc_insertion_point(field_release:providerProto.UserData.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserData::set_allocated_username(::std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:providerProto.UserData.username)
}

// string password = 2;
inline void UserData::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserData::password() const {
  // @@protoc_insertion_point(field_get:providerProto.UserData.password)
  return password_.GetNoArena();
}
inline void UserData::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:providerProto.UserData.password)
}
#if LANG_CXX11
inline void UserData::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:providerProto.UserData.password)
}
#endif
inline void UserData::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:providerProto.UserData.password)
}
inline void UserData::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:providerProto.UserData.password)
}
inline ::std::string* UserData::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:providerProto.UserData.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserData::release_password() {
  // @@protoc_insertion_point(field_release:providerProto.UserData.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserData::set_allocated_password(::std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:providerProto.UserData.password)
}

// int32 access_level = 3;
inline void UserData::clear_access_level() {
  access_level_ = 0;
}
inline ::google::protobuf::int32 UserData::access_level() const {
  // @@protoc_insertion_point(field_get:providerProto.UserData.access_level)
  return access_level_;
}
inline void UserData::set_access_level(::google::protobuf::int32 value) {
  
  access_level_ = value;
  // @@protoc_insertion_point(field_set:providerProto.UserData.access_level)
}

// string optional_data = 4;
inline void UserData::clear_optional_data() {
  optional_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserData::optional_data() const {
  // @@protoc_insertion_point(field_get:providerProto.UserData.optional_data)
  return optional_data_.GetNoArena();
}
inline void UserData::set_optional_data(const ::std::string& value) {
  
  optional_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:providerProto.UserData.optional_data)
}
#if LANG_CXX11
inline void UserData::set_optional_data(::std::string&& value) {
  
  optional_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:providerProto.UserData.optional_data)
}
#endif
inline void UserData::set_optional_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  optional_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:providerProto.UserData.optional_data)
}
inline void UserData::set_optional_data(const char* value, size_t size) {
  
  optional_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:providerProto.UserData.optional_data)
}
inline ::std::string* UserData::mutable_optional_data() {
  
  // @@protoc_insertion_point(field_mutable:providerProto.UserData.optional_data)
  return optional_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserData::release_optional_data() {
  // @@protoc_insertion_point(field_release:providerProto.UserData.optional_data)
  
  return optional_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserData::set_allocated_optional_data(::std::string* optional_data) {
  if (optional_data != nullptr) {
    
  } else {
    
  }
  optional_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), optional_data);
  // @@protoc_insertion_point(field_set_allocated:providerProto.UserData.optional_data)
}

// string certu = 5;
inline void UserData::clear_certu() {
  certu_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserData::certu() const {
  // @@protoc_insertion_point(field_get:providerProto.UserData.certu)
  return certu_.GetNoArena();
}
inline void UserData::set_certu(const ::std::string& value) {
  
  certu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:providerProto.UserData.certu)
}
#if LANG_CXX11
inline void UserData::set_certu(::std::string&& value) {
  
  certu_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:providerProto.UserData.certu)
}
#endif
inline void UserData::set_certu(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  certu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:providerProto.UserData.certu)
}
inline void UserData::set_certu(const char* value, size_t size) {
  
  certu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:providerProto.UserData.certu)
}
inline ::std::string* UserData::mutable_certu() {
  
  // @@protoc_insertion_point(field_mutable:providerProto.UserData.certu)
  return certu_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserData::release_certu() {
  // @@protoc_insertion_point(field_release:providerProto.UserData.certu)
  
  return certu_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserData::set_allocated_certu(::std::string* certu) {
  if (certu != nullptr) {
    
  } else {
    
  }
  certu_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), certu);
  // @@protoc_insertion_point(field_set_allocated:providerProto.UserData.certu)
}

// -------------------------------------------------------------------

// UserTokenAndSymKey

// string token = 1;
inline void UserTokenAndSymKey::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserTokenAndSymKey::token() const {
  // @@protoc_insertion_point(field_get:providerProto.UserTokenAndSymKey.token)
  return token_.GetNoArena();
}
inline void UserTokenAndSymKey::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:providerProto.UserTokenAndSymKey.token)
}
#if LANG_CXX11
inline void UserTokenAndSymKey::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:providerProto.UserTokenAndSymKey.token)
}
#endif
inline void UserTokenAndSymKey::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:providerProto.UserTokenAndSymKey.token)
}
inline void UserTokenAndSymKey::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:providerProto.UserTokenAndSymKey.token)
}
inline ::std::string* UserTokenAndSymKey::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:providerProto.UserTokenAndSymKey.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserTokenAndSymKey::release_token() {
  // @@protoc_insertion_point(field_release:providerProto.UserTokenAndSymKey.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserTokenAndSymKey::set_allocated_token(::std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:providerProto.UserTokenAndSymKey.token)
}

// string symkey = 2;
inline void UserTokenAndSymKey::clear_symkey() {
  symkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserTokenAndSymKey::symkey() const {
  // @@protoc_insertion_point(field_get:providerProto.UserTokenAndSymKey.symkey)
  return symkey_.GetNoArena();
}
inline void UserTokenAndSymKey::set_symkey(const ::std::string& value) {
  
  symkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:providerProto.UserTokenAndSymKey.symkey)
}
#if LANG_CXX11
inline void UserTokenAndSymKey::set_symkey(::std::string&& value) {
  
  symkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:providerProto.UserTokenAndSymKey.symkey)
}
#endif
inline void UserTokenAndSymKey::set_symkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:providerProto.UserTokenAndSymKey.symkey)
}
inline void UserTokenAndSymKey::set_symkey(const char* value, size_t size) {
  
  symkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:providerProto.UserTokenAndSymKey.symkey)
}
inline ::std::string* UserTokenAndSymKey::mutable_symkey() {
  
  // @@protoc_insertion_point(field_mutable:providerProto.UserTokenAndSymKey.symkey)
  return symkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserTokenAndSymKey::release_symkey() {
  // @@protoc_insertion_point(field_release:providerProto.UserTokenAndSymKey.symkey)
  
  return symkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserTokenAndSymKey::set_allocated_symkey(::std::string* symkey) {
  if (symkey != nullptr) {
    
  } else {
    
  }
  symkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symkey);
  // @@protoc_insertion_point(field_set_allocated:providerProto.UserTokenAndSymKey.symkey)
}

// int32 symkey_length = 3;
inline void UserTokenAndSymKey::clear_symkey_length() {
  symkey_length_ = 0;
}
inline ::google::protobuf::int32 UserTokenAndSymKey::symkey_length() const {
  // @@protoc_insertion_point(field_get:providerProto.UserTokenAndSymKey.symkey_length)
  return symkey_length_;
}
inline void UserTokenAndSymKey::set_symkey_length(::google::protobuf::int32 value) {
  
  symkey_length_ = value;
  // @@protoc_insertion_point(field_set:providerProto.UserTokenAndSymKey.symkey_length)
}

// -------------------------------------------------------------------

// RevocRequest

// string revoc_request = 1;
inline void RevocRequest::clear_revoc_request() {
  revoc_request_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RevocRequest::revoc_request() const {
  // @@protoc_insertion_point(field_get:providerProto.RevocRequest.revoc_request)
  return revoc_request_.GetNoArena();
}
inline void RevocRequest::set_revoc_request(const ::std::string& value) {
  
  revoc_request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:providerProto.RevocRequest.revoc_request)
}
#if LANG_CXX11
inline void RevocRequest::set_revoc_request(::std::string&& value) {
  
  revoc_request_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:providerProto.RevocRequest.revoc_request)
}
#endif
inline void RevocRequest::set_revoc_request(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  revoc_request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:providerProto.RevocRequest.revoc_request)
}
inline void RevocRequest::set_revoc_request(const char* value, size_t size) {
  
  revoc_request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:providerProto.RevocRequest.revoc_request)
}
inline ::std::string* RevocRequest::mutable_revoc_request() {
  
  // @@protoc_insertion_point(field_mutable:providerProto.RevocRequest.revoc_request)
  return revoc_request_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RevocRequest::release_revoc_request() {
  // @@protoc_insertion_point(field_release:providerProto.RevocRequest.revoc_request)
  
  return revoc_request_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RevocRequest::set_allocated_revoc_request(::std::string* revoc_request) {
  if (revoc_request != nullptr) {
    
  } else {
    
  }
  revoc_request_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), revoc_request);
  // @@protoc_insertion_point(field_set_allocated:providerProto.RevocRequest.revoc_request)
}

// string request_signature = 2;
inline void RevocRequest::clear_request_signature() {
  request_signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RevocRequest::request_signature() const {
  // @@protoc_insertion_point(field_get:providerProto.RevocRequest.request_signature)
  return request_signature_.GetNoArena();
}
inline void RevocRequest::set_request_signature(const ::std::string& value) {
  
  request_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:providerProto.RevocRequest.request_signature)
}
#if LANG_CXX11
inline void RevocRequest::set_request_signature(::std::string&& value) {
  
  request_signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:providerProto.RevocRequest.request_signature)
}
#endif
inline void RevocRequest::set_request_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:providerProto.RevocRequest.request_signature)
}
inline void RevocRequest::set_request_signature(const char* value, size_t size) {
  
  request_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:providerProto.RevocRequest.request_signature)
}
inline ::std::string* RevocRequest::mutable_request_signature() {
  
  // @@protoc_insertion_point(field_mutable:providerProto.RevocRequest.request_signature)
  return request_signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RevocRequest::release_request_signature() {
  // @@protoc_insertion_point(field_release:providerProto.RevocRequest.request_signature)
  
  return request_signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RevocRequest::set_allocated_request_signature(::std::string* request_signature) {
  if (request_signature != nullptr) {
    
  } else {
    
  }
  request_signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_signature);
  // @@protoc_insertion_point(field_set_allocated:providerProto.RevocRequest.request_signature)
}

// string user_token = 3;
inline void RevocRequest::clear_user_token() {
  user_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RevocRequest::user_token() const {
  // @@protoc_insertion_point(field_get:providerProto.RevocRequest.user_token)
  return user_token_.GetNoArena();
}
inline void RevocRequest::set_user_token(const ::std::string& value) {
  
  user_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:providerProto.RevocRequest.user_token)
}
#if LANG_CXX11
inline void RevocRequest::set_user_token(::std::string&& value) {
  
  user_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:providerProto.RevocRequest.user_token)
}
#endif
inline void RevocRequest::set_user_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:providerProto.RevocRequest.user_token)
}
inline void RevocRequest::set_user_token(const char* value, size_t size) {
  
  user_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:providerProto.RevocRequest.user_token)
}
inline ::std::string* RevocRequest::mutable_user_token() {
  
  // @@protoc_insertion_point(field_mutable:providerProto.RevocRequest.user_token)
  return user_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RevocRequest::release_user_token() {
  // @@protoc_insertion_point(field_release:providerProto.RevocRequest.user_token)
  
  return user_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RevocRequest::set_allocated_user_token(::std::string* user_token) {
  if (user_token != nullptr) {
    
  } else {
    
  }
  user_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_token);
  // @@protoc_insertion_point(field_set_allocated:providerProto.RevocRequest.user_token)
}

// -------------------------------------------------------------------

// RevocResponse

// string msg = 1;
inline void RevocResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RevocResponse::msg() const {
  // @@protoc_insertion_point(field_get:providerProto.RevocResponse.msg)
  return msg_.GetNoArena();
}
inline void RevocResponse::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:providerProto.RevocResponse.msg)
}
#if LANG_CXX11
inline void RevocResponse::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:providerProto.RevocResponse.msg)
}
#endif
inline void RevocResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:providerProto.RevocResponse.msg)
}
inline void RevocResponse::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:providerProto.RevocResponse.msg)
}
inline ::std::string* RevocResponse::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:providerProto.RevocResponse.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RevocResponse::release_msg() {
  // @@protoc_insertion_point(field_release:providerProto.RevocResponse.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RevocResponse::set_allocated_msg(::std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:providerProto.RevocResponse.msg)
}

// int32 response_code = 2;
inline void RevocResponse::clear_response_code() {
  response_code_ = 0;
}
inline ::google::protobuf::int32 RevocResponse::response_code() const {
  // @@protoc_insertion_point(field_get:providerProto.RevocResponse.response_code)
  return response_code_;
}
inline void RevocResponse::set_response_code(::google::protobuf::int32 value) {
  
  response_code_ = value;
  // @@protoc_insertion_point(field_set:providerProto.RevocResponse.response_code)
}

// -------------------------------------------------------------------

// UserCredentials

// string username = 1;
inline void UserCredentials::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserCredentials::username() const {
  // @@protoc_insertion_point(field_get:providerProto.UserCredentials.username)
  return username_.GetNoArena();
}
inline void UserCredentials::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:providerProto.UserCredentials.username)
}
#if LANG_CXX11
inline void UserCredentials::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:providerProto.UserCredentials.username)
}
#endif
inline void UserCredentials::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:providerProto.UserCredentials.username)
}
inline void UserCredentials::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:providerProto.UserCredentials.username)
}
inline ::std::string* UserCredentials::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:providerProto.UserCredentials.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserCredentials::release_username() {
  // @@protoc_insertion_point(field_release:providerProto.UserCredentials.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserCredentials::set_allocated_username(::std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:providerProto.UserCredentials.username)
}

// string password = 2;
inline void UserCredentials::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserCredentials::password() const {
  // @@protoc_insertion_point(field_get:providerProto.UserCredentials.password)
  return password_.GetNoArena();
}
inline void UserCredentials::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:providerProto.UserCredentials.password)
}
#if LANG_CXX11
inline void UserCredentials::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:providerProto.UserCredentials.password)
}
#endif
inline void UserCredentials::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:providerProto.UserCredentials.password)
}
inline void UserCredentials::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:providerProto.UserCredentials.password)
}
inline ::std::string* UserCredentials::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:providerProto.UserCredentials.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserCredentials::release_password() {
  // @@protoc_insertion_point(field_release:providerProto.UserCredentials.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserCredentials::set_allocated_password(::std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:providerProto.UserCredentials.password)
}

// -------------------------------------------------------------------

// NewToken

// string user_token = 1;
inline void NewToken::clear_user_token() {
  user_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NewToken::user_token() const {
  // @@protoc_insertion_point(field_get:providerProto.NewToken.user_token)
  return user_token_.GetNoArena();
}
inline void NewToken::set_user_token(const ::std::string& value) {
  
  user_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:providerProto.NewToken.user_token)
}
#if LANG_CXX11
inline void NewToken::set_user_token(::std::string&& value) {
  
  user_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:providerProto.NewToken.user_token)
}
#endif
inline void NewToken::set_user_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:providerProto.NewToken.user_token)
}
inline void NewToken::set_user_token(const char* value, size_t size) {
  
  user_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:providerProto.NewToken.user_token)
}
inline ::std::string* NewToken::mutable_user_token() {
  
  // @@protoc_insertion_point(field_mutable:providerProto.NewToken.user_token)
  return user_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewToken::release_user_token() {
  // @@protoc_insertion_point(field_release:providerProto.NewToken.user_token)
  
  return user_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewToken::set_allocated_user_token(::std::string* user_token) {
  if (user_token != nullptr) {
    
  } else {
    
  }
  user_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_token);
  // @@protoc_insertion_point(field_set_allocated:providerProto.NewToken.user_token)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace providerProto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_provider_2eproto
