// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: backEndService.proto

#include "backEndService.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace serviceProto {
class ProviderRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProviderRequest> _instance;
} _ProviderRequest_default_instance_;
class ProviderReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProviderReply> _instance;
} _ProviderReply_default_instance_;
class CertPDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CertP> _instance;
} _CertP_default_instance_;
class ProviderIDDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProviderID> _instance;
} _ProviderID_default_instance_;
class UserTokenDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserToken> _instance;
} _UserToken_default_instance_;
class BlackListResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BlackListResponse> _instance;
} _BlackListResponse_default_instance_;
}  // namespace serviceProto
static void InitDefaultsProviderRequest_backEndService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serviceProto::_ProviderRequest_default_instance_;
    new (ptr) ::serviceProto::ProviderRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serviceProto::ProviderRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ProviderRequest_backEndService_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProviderRequest_backEndService_2eproto}, {}};

static void InitDefaultsProviderReply_backEndService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serviceProto::_ProviderReply_default_instance_;
    new (ptr) ::serviceProto::ProviderReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serviceProto::ProviderReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ProviderReply_backEndService_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProviderReply_backEndService_2eproto}, {}};

static void InitDefaultsCertP_backEndService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serviceProto::_CertP_default_instance_;
    new (ptr) ::serviceProto::CertP();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serviceProto::CertP::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CertP_backEndService_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCertP_backEndService_2eproto}, {}};

static void InitDefaultsProviderID_backEndService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serviceProto::_ProviderID_default_instance_;
    new (ptr) ::serviceProto::ProviderID();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serviceProto::ProviderID::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ProviderID_backEndService_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProviderID_backEndService_2eproto}, {}};

static void InitDefaultsUserToken_backEndService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serviceProto::_UserToken_default_instance_;
    new (ptr) ::serviceProto::UserToken();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serviceProto::UserToken::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserToken_backEndService_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserToken_backEndService_2eproto}, {}};

static void InitDefaultsBlackListResponse_backEndService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serviceProto::_BlackListResponse_default_instance_;
    new (ptr) ::serviceProto::BlackListResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serviceProto::BlackListResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BlackListResponse_backEndService_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBlackListResponse_backEndService_2eproto}, {}};

void InitDefaults_backEndService_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_ProviderRequest_backEndService_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ProviderReply_backEndService_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CertP_backEndService_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ProviderID_backEndService_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserToken_backEndService_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BlackListResponse_backEndService_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_backEndService_2eproto[6];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_backEndService_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_backEndService_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_backEndService_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serviceProto::ProviderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::serviceProto::ProviderRequest, np_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serviceProto::ProviderReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::serviceProto::ProviderReply, np_),
  PROTOBUF_FIELD_OFFSET(::serviceProto::ProviderReply, certp_),
  PROTOBUF_FIELD_OFFSET(::serviceProto::ProviderReply, responsecode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serviceProto::CertP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::serviceProto::CertP, certp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serviceProto::ProviderID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::serviceProto::ProviderID, providerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serviceProto::UserToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::serviceProto::UserToken, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serviceProto::BlackListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::serviceProto::BlackListResponse, msg_),
  PROTOBUF_FIELD_OFFSET(::serviceProto::BlackListResponse, responsecode_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::serviceProto::ProviderRequest)},
  { 6, -1, sizeof(::serviceProto::ProviderReply)},
  { 14, -1, sizeof(::serviceProto::CertP)},
  { 20, -1, sizeof(::serviceProto::ProviderID)},
  { 26, -1, sizeof(::serviceProto::UserToken)},
  { 32, -1, sizeof(::serviceProto::BlackListResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::serviceProto::_ProviderRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::serviceProto::_ProviderReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::serviceProto::_CertP_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::serviceProto::_ProviderID_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::serviceProto::_UserToken_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::serviceProto::_BlackListResponse_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_backEndService_2eproto = {
  {}, AddDescriptors_backEndService_2eproto, "backEndService.proto", schemas,
  file_default_instances, TableStruct_backEndService_2eproto::offsets,
  file_level_metadata_backEndService_2eproto, 6, file_level_enum_descriptors_backEndService_2eproto, file_level_service_descriptors_backEndService_2eproto,
};

const char descriptor_table_protodef_backEndService_2eproto[] =
  "\n\024backEndService.proto\022\014serviceProto\"\035\n\017"
  "ProviderRequest\022\n\n\002Np\030\001 \001(\t\"@\n\rProviderR"
  "eply\022\n\n\002Np\030\001 \001(\t\022\r\n\005certP\030\002 \001(\t\022\024\n\014respo"
  "nseCode\030\003 \001(\005\"\026\n\005CertP\022\r\n\005certp\030\001 \001(\t\" \n"
  "\nProviderID\022\022\n\nproviderid\030\001 \001(\t\"\032\n\tUserT"
  "oken\022\r\n\005token\030\001 \001(\t\"6\n\021BlackListResponse"
  "\022\013\n\003msg\030\001 \001(\t\022\024\n\014responseCode\030\002 \001(\0052\372\001\n\016"
  "BackEndService\022K\n\013getProvider\022\035.serviceP"
  "roto.ProviderRequest\032\033.serviceProto.Prov"
  "iderReply\"\000\022C\n\020registerProvider\022\023.servic"
  "eProto.CertP\032\030.serviceProto.ProviderID\"\000"
  "\022V\n\030registerBlackListedToken\022\027.servicePr"
  "oto.UserToken\032\037.serviceProto.BlackListRe"
  "sponse\"\000b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_backEndService_2eproto = {
  false, InitDefaults_backEndService_2eproto, 
  descriptor_table_protodef_backEndService_2eproto,
  "backEndService.proto", &assign_descriptors_table_backEndService_2eproto, 536,
};

void AddDescriptors_backEndService_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_backEndService_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_backEndService_2eproto = []() { AddDescriptors_backEndService_2eproto(); return true; }();
namespace serviceProto {

// ===================================================================

void ProviderRequest::InitAsDefaultInstance() {
}
class ProviderRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProviderRequest::kNpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProviderRequest::ProviderRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:serviceProto.ProviderRequest)
}
ProviderRequest::ProviderRequest(const ProviderRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  np_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.np().size() > 0) {
    np_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.np_);
  }
  // @@protoc_insertion_point(copy_constructor:serviceProto.ProviderRequest)
}

void ProviderRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ProviderRequest_backEndService_2eproto.base);
  np_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ProviderRequest::~ProviderRequest() {
  // @@protoc_insertion_point(destructor:serviceProto.ProviderRequest)
  SharedDtor();
}

void ProviderRequest::SharedDtor() {
  np_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ProviderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProviderRequest& ProviderRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ProviderRequest_backEndService_2eproto.base);
  return *internal_default_instance();
}


void ProviderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:serviceProto.ProviderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  np_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProviderRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ProviderRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string Np = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("serviceProto.ProviderRequest.Np");
        object = msg->mutable_np();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProviderRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:serviceProto.ProviderRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string Np = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_np()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->np().data(), static_cast<int>(this->np().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "serviceProto.ProviderRequest.Np"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:serviceProto.ProviderRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:serviceProto.ProviderRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProviderRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:serviceProto.ProviderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Np = 1;
  if (this->np().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->np().data(), static_cast<int>(this->np().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "serviceProto.ProviderRequest.Np");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->np(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:serviceProto.ProviderRequest)
}

::google::protobuf::uint8* ProviderRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:serviceProto.ProviderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Np = 1;
  if (this->np().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->np().data(), static_cast<int>(this->np().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "serviceProto.ProviderRequest.Np");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->np(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serviceProto.ProviderRequest)
  return target;
}

size_t ProviderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serviceProto.ProviderRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Np = 1;
  if (this->np().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->np());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProviderRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serviceProto.ProviderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ProviderRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ProviderRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serviceProto.ProviderRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serviceProto.ProviderRequest)
    MergeFrom(*source);
  }
}

void ProviderRequest::MergeFrom(const ProviderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serviceProto.ProviderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.np().size() > 0) {

    np_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.np_);
  }
}

void ProviderRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serviceProto.ProviderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProviderRequest::CopyFrom(const ProviderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serviceProto.ProviderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProviderRequest::IsInitialized() const {
  return true;
}

void ProviderRequest::Swap(ProviderRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProviderRequest::InternalSwap(ProviderRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  np_.Swap(&other->np_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata ProviderRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_backEndService_2eproto);
  return ::file_level_metadata_backEndService_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ProviderReply::InitAsDefaultInstance() {
}
class ProviderReply::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProviderReply::kNpFieldNumber;
const int ProviderReply::kCertPFieldNumber;
const int ProviderReply::kResponseCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProviderReply::ProviderReply()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:serviceProto.ProviderReply)
}
ProviderReply::ProviderReply(const ProviderReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  np_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.np().size() > 0) {
    np_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.np_);
  }
  certp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.certp().size() > 0) {
    certp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.certp_);
  }
  responsecode_ = from.responsecode_;
  // @@protoc_insertion_point(copy_constructor:serviceProto.ProviderReply)
}

void ProviderReply::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ProviderReply_backEndService_2eproto.base);
  np_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  certp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  responsecode_ = 0;
}

ProviderReply::~ProviderReply() {
  // @@protoc_insertion_point(destructor:serviceProto.ProviderReply)
  SharedDtor();
}

void ProviderReply::SharedDtor() {
  np_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  certp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ProviderReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProviderReply& ProviderReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ProviderReply_backEndService_2eproto.base);
  return *internal_default_instance();
}


void ProviderReply::Clear() {
// @@protoc_insertion_point(message_clear_start:serviceProto.ProviderReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  np_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  certp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  responsecode_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProviderReply::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ProviderReply*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string Np = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("serviceProto.ProviderReply.Np");
        object = msg->mutable_np();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string certP = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("serviceProto.ProviderReply.certP");
        object = msg->mutable_certp();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 responseCode = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_responsecode(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProviderReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:serviceProto.ProviderReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string Np = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_np()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->np().data(), static_cast<int>(this->np().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "serviceProto.ProviderReply.Np"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string certP = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_certp()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->certp().data(), static_cast<int>(this->certp().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "serviceProto.ProviderReply.certP"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 responseCode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &responsecode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:serviceProto.ProviderReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:serviceProto.ProviderReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProviderReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:serviceProto.ProviderReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Np = 1;
  if (this->np().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->np().data(), static_cast<int>(this->np().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "serviceProto.ProviderReply.Np");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->np(), output);
  }

  // string certP = 2;
  if (this->certp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->certp().data(), static_cast<int>(this->certp().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "serviceProto.ProviderReply.certP");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->certp(), output);
  }

  // int32 responseCode = 3;
  if (this->responsecode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->responsecode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:serviceProto.ProviderReply)
}

::google::protobuf::uint8* ProviderReply::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:serviceProto.ProviderReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Np = 1;
  if (this->np().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->np().data(), static_cast<int>(this->np().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "serviceProto.ProviderReply.Np");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->np(), target);
  }

  // string certP = 2;
  if (this->certp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->certp().data(), static_cast<int>(this->certp().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "serviceProto.ProviderReply.certP");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->certp(), target);
  }

  // int32 responseCode = 3;
  if (this->responsecode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->responsecode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serviceProto.ProviderReply)
  return target;
}

size_t ProviderReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serviceProto.ProviderReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Np = 1;
  if (this->np().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->np());
  }

  // string certP = 2;
  if (this->certp().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->certp());
  }

  // int32 responseCode = 3;
  if (this->responsecode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->responsecode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProviderReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serviceProto.ProviderReply)
  GOOGLE_DCHECK_NE(&from, this);
  const ProviderReply* source =
      ::google::protobuf::DynamicCastToGenerated<ProviderReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serviceProto.ProviderReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serviceProto.ProviderReply)
    MergeFrom(*source);
  }
}

void ProviderReply::MergeFrom(const ProviderReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serviceProto.ProviderReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.np().size() > 0) {

    np_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.np_);
  }
  if (from.certp().size() > 0) {

    certp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.certp_);
  }
  if (from.responsecode() != 0) {
    set_responsecode(from.responsecode());
  }
}

void ProviderReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serviceProto.ProviderReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProviderReply::CopyFrom(const ProviderReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serviceProto.ProviderReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProviderReply::IsInitialized() const {
  return true;
}

void ProviderReply::Swap(ProviderReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProviderReply::InternalSwap(ProviderReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  np_.Swap(&other->np_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  certp_.Swap(&other->certp_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(responsecode_, other->responsecode_);
}

::google::protobuf::Metadata ProviderReply::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_backEndService_2eproto);
  return ::file_level_metadata_backEndService_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CertP::InitAsDefaultInstance() {
}
class CertP::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CertP::kCertpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CertP::CertP()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:serviceProto.CertP)
}
CertP::CertP(const CertP& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  certp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.certp().size() > 0) {
    certp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.certp_);
  }
  // @@protoc_insertion_point(copy_constructor:serviceProto.CertP)
}

void CertP::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CertP_backEndService_2eproto.base);
  certp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CertP::~CertP() {
  // @@protoc_insertion_point(destructor:serviceProto.CertP)
  SharedDtor();
}

void CertP::SharedDtor() {
  certp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CertP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CertP& CertP::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CertP_backEndService_2eproto.base);
  return *internal_default_instance();
}


void CertP::Clear() {
// @@protoc_insertion_point(message_clear_start:serviceProto.CertP)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  certp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CertP::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CertP*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string certp = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("serviceProto.CertP.certp");
        object = msg->mutable_certp();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CertP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:serviceProto.CertP)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string certp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_certp()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->certp().data(), static_cast<int>(this->certp().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "serviceProto.CertP.certp"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:serviceProto.CertP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:serviceProto.CertP)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CertP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:serviceProto.CertP)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string certp = 1;
  if (this->certp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->certp().data(), static_cast<int>(this->certp().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "serviceProto.CertP.certp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->certp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:serviceProto.CertP)
}

::google::protobuf::uint8* CertP::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:serviceProto.CertP)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string certp = 1;
  if (this->certp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->certp().data(), static_cast<int>(this->certp().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "serviceProto.CertP.certp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->certp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serviceProto.CertP)
  return target;
}

size_t CertP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serviceProto.CertP)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string certp = 1;
  if (this->certp().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->certp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CertP::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serviceProto.CertP)
  GOOGLE_DCHECK_NE(&from, this);
  const CertP* source =
      ::google::protobuf::DynamicCastToGenerated<CertP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serviceProto.CertP)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serviceProto.CertP)
    MergeFrom(*source);
  }
}

void CertP::MergeFrom(const CertP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serviceProto.CertP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.certp().size() > 0) {

    certp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.certp_);
  }
}

void CertP::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serviceProto.CertP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CertP::CopyFrom(const CertP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serviceProto.CertP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CertP::IsInitialized() const {
  return true;
}

void CertP::Swap(CertP* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CertP::InternalSwap(CertP* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  certp_.Swap(&other->certp_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CertP::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_backEndService_2eproto);
  return ::file_level_metadata_backEndService_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ProviderID::InitAsDefaultInstance() {
}
class ProviderID::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProviderID::kProvideridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProviderID::ProviderID()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:serviceProto.ProviderID)
}
ProviderID::ProviderID(const ProviderID& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  providerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.providerid().size() > 0) {
    providerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.providerid_);
  }
  // @@protoc_insertion_point(copy_constructor:serviceProto.ProviderID)
}

void ProviderID::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ProviderID_backEndService_2eproto.base);
  providerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ProviderID::~ProviderID() {
  // @@protoc_insertion_point(destructor:serviceProto.ProviderID)
  SharedDtor();
}

void ProviderID::SharedDtor() {
  providerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ProviderID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProviderID& ProviderID::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ProviderID_backEndService_2eproto.base);
  return *internal_default_instance();
}


void ProviderID::Clear() {
// @@protoc_insertion_point(message_clear_start:serviceProto.ProviderID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  providerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProviderID::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ProviderID*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string providerid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("serviceProto.ProviderID.providerid");
        object = msg->mutable_providerid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProviderID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:serviceProto.ProviderID)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string providerid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_providerid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->providerid().data(), static_cast<int>(this->providerid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "serviceProto.ProviderID.providerid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:serviceProto.ProviderID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:serviceProto.ProviderID)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProviderID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:serviceProto.ProviderID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string providerid = 1;
  if (this->providerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->providerid().data(), static_cast<int>(this->providerid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "serviceProto.ProviderID.providerid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->providerid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:serviceProto.ProviderID)
}

::google::protobuf::uint8* ProviderID::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:serviceProto.ProviderID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string providerid = 1;
  if (this->providerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->providerid().data(), static_cast<int>(this->providerid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "serviceProto.ProviderID.providerid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->providerid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serviceProto.ProviderID)
  return target;
}

size_t ProviderID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serviceProto.ProviderID)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string providerid = 1;
  if (this->providerid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->providerid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProviderID::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serviceProto.ProviderID)
  GOOGLE_DCHECK_NE(&from, this);
  const ProviderID* source =
      ::google::protobuf::DynamicCastToGenerated<ProviderID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serviceProto.ProviderID)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serviceProto.ProviderID)
    MergeFrom(*source);
  }
}

void ProviderID::MergeFrom(const ProviderID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serviceProto.ProviderID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.providerid().size() > 0) {

    providerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.providerid_);
  }
}

void ProviderID::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serviceProto.ProviderID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProviderID::CopyFrom(const ProviderID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serviceProto.ProviderID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProviderID::IsInitialized() const {
  return true;
}

void ProviderID::Swap(ProviderID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProviderID::InternalSwap(ProviderID* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  providerid_.Swap(&other->providerid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata ProviderID::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_backEndService_2eproto);
  return ::file_level_metadata_backEndService_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UserToken::InitAsDefaultInstance() {
}
class UserToken::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserToken::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserToken::UserToken()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:serviceProto.UserToken)
}
UserToken::UserToken(const UserToken& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  // @@protoc_insertion_point(copy_constructor:serviceProto.UserToken)
}

void UserToken::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UserToken_backEndService_2eproto.base);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UserToken::~UserToken() {
  // @@protoc_insertion_point(destructor:serviceProto.UserToken)
  SharedDtor();
}

void UserToken::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserToken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserToken& UserToken::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UserToken_backEndService_2eproto.base);
  return *internal_default_instance();
}


void UserToken::Clear() {
// @@protoc_insertion_point(message_clear_start:serviceProto.UserToken)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserToken::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UserToken*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string token = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("serviceProto.UserToken.token");
        object = msg->mutable_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserToken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:serviceProto.UserToken)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "serviceProto.UserToken.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:serviceProto.UserToken)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:serviceProto.UserToken)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserToken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:serviceProto.UserToken)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "serviceProto.UserToken.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:serviceProto.UserToken)
}

::google::protobuf::uint8* UserToken::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:serviceProto.UserToken)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "serviceProto.UserToken.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serviceProto.UserToken)
  return target;
}

size_t UserToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serviceProto.UserToken)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserToken::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serviceProto.UserToken)
  GOOGLE_DCHECK_NE(&from, this);
  const UserToken* source =
      ::google::protobuf::DynamicCastToGenerated<UserToken>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serviceProto.UserToken)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serviceProto.UserToken)
    MergeFrom(*source);
  }
}

void UserToken::MergeFrom(const UserToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serviceProto.UserToken)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
}

void UserToken::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serviceProto.UserToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserToken::CopyFrom(const UserToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serviceProto.UserToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserToken::IsInitialized() const {
  return true;
}

void UserToken::Swap(UserToken* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserToken::InternalSwap(UserToken* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata UserToken::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_backEndService_2eproto);
  return ::file_level_metadata_backEndService_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BlackListResponse::InitAsDefaultInstance() {
}
class BlackListResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlackListResponse::kMsgFieldNumber;
const int BlackListResponse::kResponseCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlackListResponse::BlackListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:serviceProto.BlackListResponse)
}
BlackListResponse::BlackListResponse(const BlackListResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  responsecode_ = from.responsecode_;
  // @@protoc_insertion_point(copy_constructor:serviceProto.BlackListResponse)
}

void BlackListResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BlackListResponse_backEndService_2eproto.base);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  responsecode_ = 0;
}

BlackListResponse::~BlackListResponse() {
  // @@protoc_insertion_point(destructor:serviceProto.BlackListResponse)
  SharedDtor();
}

void BlackListResponse::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BlackListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlackListResponse& BlackListResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BlackListResponse_backEndService_2eproto.base);
  return *internal_default_instance();
}


void BlackListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:serviceProto.BlackListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  responsecode_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BlackListResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BlackListResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string msg = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("serviceProto.BlackListResponse.msg");
        object = msg->mutable_msg();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 responseCode = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_responsecode(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BlackListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:serviceProto.BlackListResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "serviceProto.BlackListResponse.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 responseCode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &responsecode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:serviceProto.BlackListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:serviceProto.BlackListResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BlackListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:serviceProto.BlackListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "serviceProto.BlackListResponse.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->msg(), output);
  }

  // int32 responseCode = 2;
  if (this->responsecode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->responsecode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:serviceProto.BlackListResponse)
}

::google::protobuf::uint8* BlackListResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:serviceProto.BlackListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "serviceProto.BlackListResponse.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }

  // int32 responseCode = 2;
  if (this->responsecode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->responsecode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serviceProto.BlackListResponse)
  return target;
}

size_t BlackListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serviceProto.BlackListResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 1;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  // int32 responseCode = 2;
  if (this->responsecode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->responsecode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlackListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serviceProto.BlackListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BlackListResponse* source =
      ::google::protobuf::DynamicCastToGenerated<BlackListResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serviceProto.BlackListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serviceProto.BlackListResponse)
    MergeFrom(*source);
  }
}

void BlackListResponse::MergeFrom(const BlackListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serviceProto.BlackListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.responsecode() != 0) {
    set_responsecode(from.responsecode());
  }
}

void BlackListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serviceProto.BlackListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlackListResponse::CopyFrom(const BlackListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serviceProto.BlackListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlackListResponse::IsInitialized() const {
  return true;
}

void BlackListResponse::Swap(BlackListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlackListResponse::InternalSwap(BlackListResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(responsecode_, other->responsecode_);
}

::google::protobuf::Metadata BlackListResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_backEndService_2eproto);
  return ::file_level_metadata_backEndService_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace serviceProto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::serviceProto::ProviderRequest* Arena::CreateMaybeMessage< ::serviceProto::ProviderRequest >(Arena* arena) {
  return Arena::CreateInternal< ::serviceProto::ProviderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::serviceProto::ProviderReply* Arena::CreateMaybeMessage< ::serviceProto::ProviderReply >(Arena* arena) {
  return Arena::CreateInternal< ::serviceProto::ProviderReply >(arena);
}
template<> PROTOBUF_NOINLINE ::serviceProto::CertP* Arena::CreateMaybeMessage< ::serviceProto::CertP >(Arena* arena) {
  return Arena::CreateInternal< ::serviceProto::CertP >(arena);
}
template<> PROTOBUF_NOINLINE ::serviceProto::ProviderID* Arena::CreateMaybeMessage< ::serviceProto::ProviderID >(Arena* arena) {
  return Arena::CreateInternal< ::serviceProto::ProviderID >(arena);
}
template<> PROTOBUF_NOINLINE ::serviceProto::UserToken* Arena::CreateMaybeMessage< ::serviceProto::UserToken >(Arena* arena) {
  return Arena::CreateInternal< ::serviceProto::UserToken >(arena);
}
template<> PROTOBUF_NOINLINE ::serviceProto::BlackListResponse* Arena::CreateMaybeMessage< ::serviceProto::BlackListResponse >(Arena* arena) {
  return Arena::CreateInternal< ::serviceProto::BlackListResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
