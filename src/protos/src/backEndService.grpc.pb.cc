// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: backEndService.proto

#include "backEndService.pb.h"
#include "backEndService.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace serviceProto {

static const char* BackEndService_method_names[] = {
  "/serviceProto.BackEndService/getProvider",
  "/serviceProto.BackEndService/registerProvider",
  "/serviceProto.BackEndService/registerBlackListedToken",
};

std::unique_ptr< BackEndService::Stub> BackEndService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< BackEndService::Stub> stub(new BackEndService::Stub(channel));
  return stub;
}

BackEndService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_getProvider_(BackEndService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_registerProvider_(BackEndService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_registerBlackListedToken_(BackEndService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status BackEndService::Stub::getProvider(::grpc::ClientContext* context, const ::serviceProto::ProviderRequest& request, ::serviceProto::ProviderReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getProvider_, context, request, response);
}

void BackEndService::Stub::experimental_async::getProvider(::grpc::ClientContext* context, const ::serviceProto::ProviderRequest* request, ::serviceProto::ProviderReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getProvider_, context, request, response, std::move(f));
}

void BackEndService::Stub::experimental_async::getProvider(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::serviceProto::ProviderReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getProvider_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::serviceProto::ProviderReply>* BackEndService::Stub::AsyncgetProviderRaw(::grpc::ClientContext* context, const ::serviceProto::ProviderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::serviceProto::ProviderReply>::Create(channel_.get(), cq, rpcmethod_getProvider_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::serviceProto::ProviderReply>* BackEndService::Stub::PrepareAsyncgetProviderRaw(::grpc::ClientContext* context, const ::serviceProto::ProviderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::serviceProto::ProviderReply>::Create(channel_.get(), cq, rpcmethod_getProvider_, context, request, false);
}

::grpc::Status BackEndService::Stub::registerProvider(::grpc::ClientContext* context, const ::serviceProto::CertP& request, ::serviceProto::ProviderID* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_registerProvider_, context, request, response);
}

void BackEndService::Stub::experimental_async::registerProvider(::grpc::ClientContext* context, const ::serviceProto::CertP* request, ::serviceProto::ProviderID* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_registerProvider_, context, request, response, std::move(f));
}

void BackEndService::Stub::experimental_async::registerProvider(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::serviceProto::ProviderID* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_registerProvider_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::serviceProto::ProviderID>* BackEndService::Stub::AsyncregisterProviderRaw(::grpc::ClientContext* context, const ::serviceProto::CertP& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::serviceProto::ProviderID>::Create(channel_.get(), cq, rpcmethod_registerProvider_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::serviceProto::ProviderID>* BackEndService::Stub::PrepareAsyncregisterProviderRaw(::grpc::ClientContext* context, const ::serviceProto::CertP& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::serviceProto::ProviderID>::Create(channel_.get(), cq, rpcmethod_registerProvider_, context, request, false);
}

::grpc::Status BackEndService::Stub::registerBlackListedToken(::grpc::ClientContext* context, const ::serviceProto::UserToken& request, ::serviceProto::BlackListResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_registerBlackListedToken_, context, request, response);
}

void BackEndService::Stub::experimental_async::registerBlackListedToken(::grpc::ClientContext* context, const ::serviceProto::UserToken* request, ::serviceProto::BlackListResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_registerBlackListedToken_, context, request, response, std::move(f));
}

void BackEndService::Stub::experimental_async::registerBlackListedToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::serviceProto::BlackListResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_registerBlackListedToken_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::serviceProto::BlackListResponse>* BackEndService::Stub::AsyncregisterBlackListedTokenRaw(::grpc::ClientContext* context, const ::serviceProto::UserToken& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::serviceProto::BlackListResponse>::Create(channel_.get(), cq, rpcmethod_registerBlackListedToken_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::serviceProto::BlackListResponse>* BackEndService::Stub::PrepareAsyncregisterBlackListedTokenRaw(::grpc::ClientContext* context, const ::serviceProto::UserToken& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::serviceProto::BlackListResponse>::Create(channel_.get(), cq, rpcmethod_registerBlackListedToken_, context, request, false);
}

BackEndService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BackEndService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BackEndService::Service, ::serviceProto::ProviderRequest, ::serviceProto::ProviderReply>(
          std::mem_fn(&BackEndService::Service::getProvider), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BackEndService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BackEndService::Service, ::serviceProto::CertP, ::serviceProto::ProviderID>(
          std::mem_fn(&BackEndService::Service::registerProvider), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BackEndService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BackEndService::Service, ::serviceProto::UserToken, ::serviceProto::BlackListResponse>(
          std::mem_fn(&BackEndService::Service::registerBlackListedToken), this)));
}

BackEndService::Service::~Service() {
}

::grpc::Status BackEndService::Service::getProvider(::grpc::ServerContext* context, const ::serviceProto::ProviderRequest* request, ::serviceProto::ProviderReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BackEndService::Service::registerProvider(::grpc::ServerContext* context, const ::serviceProto::CertP* request, ::serviceProto::ProviderID* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BackEndService::Service::registerBlackListedToken(::grpc::ServerContext* context, const ::serviceProto::UserToken* request, ::serviceProto::BlackListResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace serviceProto

